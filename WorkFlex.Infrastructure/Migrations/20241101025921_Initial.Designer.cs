// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241101025921_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7417),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7420),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7422),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7423),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7424),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7425),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7426),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7427),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7428),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7429),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1824422b-ef6e-4fd0-8947-8f1b6f51302a"),
                            ApplicationDate = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7642),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("18edd806-66bc-47a7-bd24-7e4924097930"),
                            Status = 2,
                            UserId = new Guid("c58d1f09-d735-4306-b9f9-1a9b9fddc482")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18edd806-66bc-47a7-bd24-7e4924097930"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7516),
                            IndustryId = 4,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm và phát triển khách hàng mới cho tạp hóa.\n- Đạt được mục tiêu doanh số hàng tháng của cửa hàng.\n- Hỗ trợ khách hàng trong quá trình mua sắm tại tạp hóa.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực bán hàng hoặc tạp hóa.\n- Kỹ năng giao tiếp tốt và thân thiện với khách hàng.\n- Có khả năng làm việc theo nhóm và độc lập.",
                            JobLocation = "Tạp Hóa Anh Ba, Đường Lê Lợi, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7515),
                            SalaryRange = "100 - 150",
                            Status = 0,
                            Title = "Nhân Viên Bán Hàng Tạp Hóa Anh Ba",
                            UserId = new Guid("67bd4c46-d2c1-4e66-956d-4750fe83ef78")
                        },
                        new
                        {
                            Id = new Guid("aa401aef-c9eb-4e43-9fba-c6c9fecb7ff0"),
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7529),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật của khách hàng.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về công nghệ thông tin.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà B, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7528),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("e3b33627-a210-440e-a3b0-9d55689094a2"),
                            CreatedAt = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7533),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả chiến dịch.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà C, Đường Nguyễn Huệ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7533),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Marketing",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("287457cc-8ea2-4587-87ff-a3ce9ec20521"),
                            CreatedAt = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7537),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ khách hàng qua điện thoại và email.\n- Giải quyết các vấn đề của khách hàng.\n- Cung cấp thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp và lắng nghe tốt.\n- Có khả năng làm việc dưới áp lực.\n- Chịu khó và cầu tiến.",
                            JobLocation = "Tòa nhà D, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7537),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Khách Hàng Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("4cd318c6-794f-4881-bc8a-26da4e0950e9"),
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7541),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm khách hàng và giới thiệu sản phẩm.\n- Đạt được chỉ tiêu doanh số tháng.\n- Duy trì mối quan hệ với khách hàng hiện tại.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc độc lập và theo nhóm.",
                            JobLocation = "Tòa nhà E, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7541),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Kinh Doanh Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("c4fa3bf7-1e7e-489c-9f8d-acd2f44329d5"),
                            CreatedAt = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7545),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích dữ liệu và báo cáo kết quả.\n- Tham gia các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà F, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7545),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Marketing Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("404e50cc-ad5d-4a1b-aed3-c01020568729"),
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7549),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn sản phẩm cho khách hàng.\n- Hỗ trợ giải quyết thắc mắc của khách hàng.\n- Cập nhật thông tin về sản phẩm mới.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà G, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7548),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Tư Vấn Khách Hàng Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("fd170648-2c79-45a1-8062-310d4254b2c9"),
                            CreatedAt = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7555),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về kỹ thuật.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà H, Đường Phạm Văn Đồng, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7554),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("3c92f177-812c-4fb9-9018-8d57911a5fdf"),
                            CreatedAt = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7559),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích và báo cáo kết quả chiến dịch.\n- Tham gia vào các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà I, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7558),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Marketing Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("ea01a830-4be5-4e98-95e8-5dcd8833a173"),
                            CreatedAt = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7562),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ thực hiện các kế hoạch kinh doanh.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà J, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7562),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kinh Doanh",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("098760d8-6212-46d3-98fe-b6092864d821"),
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7566),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing số.\n- Theo dõi và phân tích dữ liệu trên các kênh truyền thông.\n- Cập nhật thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà K, Đường Trần Phú, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7566),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Digital Marketing",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("ca7c80eb-636c-40be-b39f-710ea2ea1127"),
                            CreatedAt = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7570),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật trong các dự án IT.\n- Học hỏi và phát triển kỹ năng chuyên môn.\n- Tham gia vào các công việc hàng ngày của nhóm kỹ thuật.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành IT.\n- Có kiến thức cơ bản về lập trình.\n- Nhiệt tình và ham học hỏi.",
                            JobLocation = "Tòa nhà L, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7569),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kỹ Thuật IT",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("99750a50-0b0d-4fd3-9626-d533848e9295"),
                            CreatedAt = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7574),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và thực hiện các chiến dịch marketing.\n- Quản lý ngân sách marketing và báo cáo kết quả.\n- Phân tích xu hướng thị trường và nhu cầu khách hàng.\n\nYêu cầu ứng viên:\n- Tối thiểu 3 năm kinh nghiệm trong lĩnh vực marketing.\n- Kỹ năng lãnh đạo và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà M, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7573),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Quản Lý Marketing",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("695661ec-8d0f-4ecc-8516-3bafc5fc6f27"),
                            CreatedAt = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7578),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phân tích dữ liệu để đưa ra quyết định chiến lược.\n- Tạo báo cáo và trình bày kết quả phân tích.\n- Hỗ trợ các bộ phận khác trong việc sử dụng dữ liệu.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong phân tích dữ liệu.\n- Kỹ năng sử dụng các công cụ phân tích và báo cáo.\n- Tốt nghiệp chuyên ngành thống kê, kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà N, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7577),
                            SalaryRange = "2000 - 3000",
                            Status = 0,
                            Title = "Chuyên Viên Phân Tích Dữ Liệu",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("6867ac7d-2070-4d33-8e69-cf2d6d139e82"),
                            CreatedAt = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7581),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì mối quan hệ với khách hàng.\n- Đạt được mục tiêu doanh số hàng tháng.\n- Phân tích nhu cầu của khách hàng để đề xuất các giải pháp phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà O, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7581),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Chuyên Viên Kinh Doanh",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("64ca3f34-e832-4365-93f1-119ec61883ce"),
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7587),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì các ứng dụng phần mềm.\n- Làm việc với các nhóm để phát triển sản phẩm.\n- Thực hiện kiểm thử và sửa lỗi phần mềm.\n\nYêu cầu ứng viên:\n- Có ít nhất 2 năm kinh nghiệm lập trình.\n- Thành thạo một hoặc nhiều ngôn ngữ lập trình.\n- Kỹ năng làm việc nhóm và giải quyết vấn đề tốt.",
                            JobLocation = "Tòa nhà P, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7586),
                            SalaryRange = "3000 - 4000",
                            Status = 0,
                            Title = "Kỹ Sư Phần Mềm",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("33e43b4b-f098-4742-bdf7-037850073908"),
                            CreatedAt = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7591),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và giám sát tiến độ dự án.\n- Quản lý nguồn lực và ngân sách dự án.\n- Đảm bảo các mục tiêu dự án được thực hiện đúng hạn.\n\nYêu cầu ứng viên:\n- Tối thiểu 5 năm kinh nghiệm trong quản lý dự án.\n- Kỹ năng lãnh đạo và quản lý tốt.\n- Tốt nghiệp chuyên ngành quản trị kinh doanh hoặc tương đương.",
                            JobLocation = "Tòa nhà Q, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7590),
                            SalaryRange = "4000 - 5000",
                            Status = 0,
                            Title = "Giám Đốc Dự Án",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("ff151222-a992-4e7b-9c22-ca998380039a"),
                            CreatedAt = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7594),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn và quản lý các dịch vụ tài chính cho khách hàng.\n- Phân tích và đánh giá tình hình tài chính của khách hàng.\n- Xây dựng các kế hoạch tài chính phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực tài chính hoặc ngân hàng.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành tài chính hoặc tương đương.",
                            JobLocation = "Tòa nhà R, Đường Trần Nhân Tông, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7594),
                            SalaryRange = "3500 - 4500",
                            Status = 0,
                            Title = "Chuyên Viên Tư Vấn Tài Chính",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("6db2fe09-99a8-455a-a5ea-8787f75866b8"),
                            CreatedAt = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7598),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ tổ chức và quản lý các sự kiện.\n- Liên lạc với các nhà cung cấp và khách hàng.\n- Đảm bảo mọi thứ diễn ra suôn sẻ trong sự kiện.\n\nYêu cầu ứng viên:\n- Kỹ năng tổ chức và giao tiếp tốt.\n- Có khả năng làm việc dưới áp lực cao.\n- Nhiệt tình và sáng tạo.",
                            JobLocation = "Tòa nhà S, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7598),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Tổ Chức Sự Kiện Part-time",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("7d443daa-5dc2-4787-bbf7-b14742015e0b"),
                            CreatedAt = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7602),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Nghiên cứu và phân tích thị trường để phát triển chiến lược.\n- Phát triển mối quan hệ với khách hàng và đối tác.\n- Tạo báo cáo và đề xuất các giải pháp kinh doanh.\n\nYêu cầu ứng viên:\n- Tối thiểu 2 năm kinh nghiệm trong phát triển thị trường.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành kinh tế, marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà T, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7602),
                            SalaryRange = "3.000 - 7.000",
                            Status = 0,
                            Title = "Chuyên Viên Phát Triển Thị Trường",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7383),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7386),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7387),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa4ea6ae-d617-4ae1-a91d-8385d901b704"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7326),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("30d0ec3d-6da4-43d4-b9e2-c259fc9a4e11")
                        },
                        new
                        {
                            Id = new Guid("b4539aa4-5bb1-4c73-8319-3f64a8c8dde7"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7331),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb")
                        },
                        new
                        {
                            Id = new Guid("56f90d1b-161b-4389-b181-6f189b484184"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7333),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("c58d1f09-d735-4306-b9f9-1a9b9fddc482")
                        },
                        new
                        {
                            Id = new Guid("63358ff0-4f6b-4003-924a-fb19054a6b63"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7334),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("3f99986a-953e-43cc-98c5-a842cd0808a1")
                        },
                        new
                        {
                            Id = new Guid("a9910264-5041-4dc4-9781-4f0682573207"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7338),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("67bd4c46-d2c1-4e66-956d-4750fe83ef78")
                        },
                        new
                        {
                            Id = new Guid("fd4ea0f7-eac1-4582-9aa9-f5102e164796"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7340),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("543d3c1e-b344-4391-8f97-3c14e9e0f67d")
                        },
                        new
                        {
                            Id = new Guid("7a844f32-1575-4b1d-801d-3037ac7a2536"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7341),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("5a917248-65fb-44ea-ac6b-ff0c10b84137")
                        },
                        new
                        {
                            Id = new Guid("c5f2ba50-ae50-4e77-b9f5-c2455061c193"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7342),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9fa449ba-da72-4e9a-80dd-dfd4c022e58c")
                        },
                        new
                        {
                            Id = new Guid("6d02d55d-f67a-483f-9708-1ee1a396e3f9"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7344),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("5c71e821-86d6-4b02-9a7b-98e68a61d3b7")
                        },
                        new
                        {
                            Id = new Guid("4ca1adc2-cd2e-4506-a58d-06aca4261f8b"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7346),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f995d00b-06f5-44b8-bf63-27ed5f7ea172")
                        },
                        new
                        {
                            Id = new Guid("b31ff108-4af6-4e9e-bf30-77ce0e6be1b9"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7348),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("a429c4b0-2e25-4cf7-a73b-9d53a3555ee0")
                        },
                        new
                        {
                            Id = new Guid("1adcadfa-a580-4462-be0d-47e9b4799f5d"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7349),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("4272b117-2994-4483-b816-2b8440b71dbb")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30d0ec3d-6da4-43d4-b9e2-c259fc9a4e11"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftjw6hg_1730428353803_table-img1.png?alt=media&token=fa6ddab5-418a-4cfb-ab75-2aa0d578c164",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 11, 1, 2, 59, 20, 768, DateTimeKind.Utc).AddTicks(7240),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("1a3bcd57-566a-4176-8b67-346ac1f4e8fb"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F2q2joa_1730428345764_vendor-14.png?alt=media&token=75952a9b-a099-4ec3-acc5-3240f0839dd2",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("c58d1f09-d735-4306-b9f9-1a9b9fddc482"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F17mshd_1730428341488_vendor-13.png?alt=media&token=33092b37-f077-4863-9329-63fa6e5964f7",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        },
                        new
                        {
                            Id = new Guid("3f99986a-953e-43cc-98c5-a842cd0808a1"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fwobtrg_1730428336088_vendor-11.png?alt=media&token=306e81e3-dee1-4e09-bd09-0ea22d9bcd66",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnweek@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Week",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zWTkYvKaD2nrl/FIEzZvAus4fK1zT5kIk9U.IrzNxHZOzLxYzIYNe",
                            Phone = "",
                            RoleId = 3,
                            Username = "johnweek"
                        },
                        new
                        {
                            Id = new Guid("67bd4c46-d2c1-4e66-956d-4750fe83ef78"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Frijtlx_1730428289939_vendor-1.png?alt=media&token=529439ae-4bc1-4c9a-ad2a-6d97f0c5ae25",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmau-cua-hang-tap-hoa-12-aeros.webp?alt=media&token=55cb771a-c564-4d29-b0fa-f6cccea186e2",
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huy@example.com",
                            FirstName = "Tran Duck",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Huy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$MNV7kUVAks5PkB4cMD8cNuLvONZlKt/ej7.hCdRTGyj4F/csD8oKK",
                            Phone = "",
                            RoleId = 2,
                            Username = "tranduckhuy"
                        },
                        new
                        {
                            Id = new Guid("543d3c1e-b344-4391-8f97-3c14e9e0f67d"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F9xi15_1730428296376_vendor-2.png?alt=media&token=e850aa0f-9798-45da-851a-1b4a7bc6726d",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sang@example.com",
                            FirstName = "Tran Ngoc",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Sang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$CwxlScy8xNpcrGL/2sg7V.vDUC1zh.QOjZD1qefQgxmq3vn0Q7R9.",
                            Phone = "",
                            RoleId = 2,
                            Username = "sang"
                        },
                        new
                        {
                            Id = new Guid("5a917248-65fb-44ea-ac6b-ff0c10b84137"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fvn1m3b_1730428306808_vendor-4.png?alt=media&token=f1e61339-1c7f-4065-acbf-d49a012dc604",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quy@example.com",
                            FirstName = "Nguyen Xuan",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Quy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$O/urkLFsFi/GN9s0asTeZ.3YnvDozIBPXS5vpDbl6Kvz4RsxZYRIS",
                            Phone = "",
                            RoleId = 2,
                            Username = "quy"
                        },
                        new
                        {
                            Id = new Guid("9fa449ba-da72-4e9a-80dd-dfd4c022e58c"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Faq8ir_1730428301407_vendor-3.png?alt=media&token=295216c1-4ea0-4a0c-8a61-3c66200f41bb",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hao@example.com",
                            FirstName = "Nguyen Nhat",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hao",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$KcwDWaYdePFeLgKTwoJd7OQl6YCi9ZvCzdPDdt7lROYp2paxwpyGC",
                            Phone = "",
                            RoleId = 3,
                            Username = "hao"
                        },
                        new
                        {
                            Id = new Guid("5c71e821-86d6-4b02-9a7b-98e68a61d3b7"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftvujfq_1730428311602_vendor-5.png?alt=media&token=65db1056-55f6-4620-990b-c3641807507f",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thuan@example.com",
                            FirstName = "Nguyen Dao",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Minh Thuan",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$3hGHatEPOSTNLlvBEUMw.uxZMLNxLz74/Ls47cvbccwwlJlhFELqS",
                            Phone = "",
                            RoleId = 3,
                            Username = "thuan"
                        },
                        new
                        {
                            Id = new Guid("f995d00b-06f5-44b8-bf63-27ed5f7ea172"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fkxakd5_1730428320184_vendor-7.png?alt=media&token=9a4cabc8-8372-45d8-9d3e-364766154550",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang@example.com",
                            FirstName = "Ngo Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hoang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$aYH6ji8QMczfCJxRGoBUqeTA7Ttk1JnanbTXBiafDDrrOQcy6hK7O",
                            Phone = "",
                            RoleId = 3,
                            Username = "hoang"
                        },
                        new
                        {
                            Id = new Guid("a429c4b0-2e25-4cf7-a73b-9d53a3555ee0"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ffc2hi5_1730428324559_vendor-9.png?alt=media&token=fa4632f1-2584-4496-9927-d0a645413638",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thinh@example.com",
                            FirstName = "Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Thinh",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$kzs6W6lPdNmhq9mAxWfov.FJAHD2YDQJgQ/oiDeeMo78LKzDExz2O",
                            Phone = "",
                            RoleId = 3,
                            Username = "thinh"
                        },
                        new
                        {
                            Id = new Guid("4272b117-2994-4483-b816-2b8440b71dbb"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmrcf7_1730428331026_vendor-10.png?alt=media&token=9e787b31-eea6-4f38-a2c2-fa3c8a2140e1",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nghia@example.com",
                            FirstName = "Trong",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Nghia",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zD2J2lknJ27rADmUbwJM9eSS0sX16W/FUw/xVx7XauSjOuxauzeZa",
                            Phone = "",
                            RoleId = 3,
                            Username = "nghia"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
