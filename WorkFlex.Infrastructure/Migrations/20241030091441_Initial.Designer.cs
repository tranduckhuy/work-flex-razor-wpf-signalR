// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241030091441_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7355),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7357),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7358),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7359),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7360),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7361),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7362),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7363),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7364),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7365),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a778eb2-c33d-4fd4-a7ca-ebc198588cea"),
                            ApplicationDate = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7567),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("0f73a3ec-2fc0-4e9f-922f-2493a25d168c"),
                            Status = 2,
                            UserId = new Guid("e16702dc-edc3-4311-950a-5c78a273f377")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f73a3ec-2fc0-4e9f-922f-2493a25d168c"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7407),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7408),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Develop and maintain web applications.\n- Participate in the design and product development process.\n- Optimize performance and security of web applications.\n\nCandidate Requirements:\n- Experience with HTML, CSS, JavaScript, and PHP.\n- Problem-solving skills and logical thinking.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà A, Số 12, Phố Nguyễn Trãi, Quận Thanh Xuân, Hải Phòng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7408),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Web Developer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("d932ccfc-1bf3-471b-9b04-e6da182b2c1e"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7421),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7422),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Analyze data and create reports for management.\n- Use analytical tools to detect data trends.\n- Collaborate with other departments to improve processes based on data.\n\nCandidate Requirements:\n- Experience with Excel, SQL, and data analysis tools.\n- Communication and data presentation skills.\n- Graduate in statistics, mathematics, or equivalent.",
                            JobLocation = "Văn phòng 5, Số 23, Phố Lê Duẩn, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7422),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Data Analyst",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("93bbf39f-2347-413e-861d-5d4e44fe106a"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7427),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7428),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design user interfaces for applications and websites.\n- Research and analyze user needs to improve experiences.\n- Create design prototypes and collaborate with development teams.\n\nCandidate Requirements:\n- Experience with Figma, Sketch, or Adobe XD.\n- Good communication and teamwork skills.\n- Graduate in design or equivalent.",
                            JobLocation = "Tầng 2, Số 45, Phố Lê Lai, Quận 1, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7427),
                            SalaryRange = "1800 - 2200",
                            Status = 0,
                            Title = "UX/UI Designer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("3f5fd29c-62c9-4927-83d4-52dfd10b8613"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7432),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7433),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Manage the recruitment and training processes for new employees.\n- Develop HR policies and manage performance.\n- Advise management on HR-related issues.\n\nCandidate Requirements:\n- At least 3 years of experience in a similar position.\n- Strong communication and leadership skills.\n- Graduate in human resource management or equivalent.",
                            JobLocation = "Văn phòng 3, Số 78, Phố Nguyễn Trãi, Quận Thanh Xuân, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7432),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "HR Manager",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("4417e32d-ad60-4302-aa82-da453e568ecc"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7437),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7438),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Design graphic products for marketing campaigns.\n- Collaborate with other departments to create creative content.\n- Maintain the company’s brand and design style.\n\nCandidate Requirements:\n- Experience with Adobe Illustrator, Photoshop.\n- Creative thinking and ability to work under pressure.\n- Graduate in graphic design or equivalent.",
                            JobLocation = "Tầng trệt, Số 92, Phố Võ Văn Kiệt, Quận 1, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7437),
                            SalaryRange = "1200 - 1500",
                            Status = 0,
                            Title = "Graphic Designer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("a691d792-63e2-49f0-8cfa-16eedd315b23"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7441),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7442),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Write content for blogs, websites, and social media.\n- Research and develop new content topics.\n- Optimize content for SEO.\n\nCandidate Requirements:\n- Good writing and editing skills.\n- Experience in content writing is a plus.\n- Graduate in journalism, communication, or equivalent.",
                            JobLocation = "Văn phòng 10, Số 56, Phố Nguyễn Thị Minh Khai, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7442),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Content Writer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("36fddd95-2455-46dc-b1c4-a315e4187767"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7447),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7448),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Seek and develop new customers.\n- Conduct calls and meet clients to introduce products.\n- Achieve monthly sales targets.\n\nCandidate Requirements:\n- Experience in sales.\n- Good communication and persuasion skills.\n- University graduate in business or equivalent.",
                            JobLocation = "Văn phòng 4, Số 150, Phố Trần Hưng Đạo, Quận 5, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7448),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Sales Executive",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("33ece889-02a7-477b-ab4f-fbd8abadcaed"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7455),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7456),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design and implement computer networks.\n- Monitor and maintain network systems.\n- Troubleshoot network-related issues.\n\nCandidate Requirements:\n- Experience with networking equipment.\n- CCNA certification is a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà B, Số 34, Phố Lê Văn Sỹ, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7456),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Network Engineer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("7b44c719-2c45-429f-9a7c-170f8169953b"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7460),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7461),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Optimize websites to improve search engine rankings.\n- Research and analyze keywords.\n- Monitor and report on SEO performance.\n\nCandidate Requirements:\n- Experience in SEO.\n- Good analytical and problem-solving skills.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 7, Số 88, Phố Nguyễn Đình Chiểu, Quận 1, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7460),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "SEO Specialist",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("1f8581e8-b369-437e-83de-64b1c045d552"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7464),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7465),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Responsible for product development and management.\n- Coordinate with departments to ensure product timelines.\n- Research market trends and analyze customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in product management.\n- Strong leadership and communication skills.\n- Graduate in business management or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7465),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Product Manager",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("9fa99d22-d367-4174-8791-5a8be05499bc"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7469),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7470),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Perform software testing to ensure product quality.\n- Analyze and report bugs.\n- Collaborate with development engineers to improve testing processes.\n\nCandidate Requirements:\n- Experience in software testing.\n- Understanding of software development processes.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7470),
                            SalaryRange = "1500 - 1800",
                            Status = 0,
                            Title = "Software Tester",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("d6aceb1a-882a-4568-8700-866a5d8159a6"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7473),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7474),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Analyze financial situations and prepare financial reports.\n- Provide investment and risk management recommendations.\n- Monitor and analyze market trends.\n\nCandidate Requirements:\n- Experience in financial analysis.\n- Strong analytical and reporting skills.\n- Graduate in finance or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7474),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Financial Analyst",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("2c23c650-386c-48a1-830e-4b6f7512b2da"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7479),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7480),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Build and implement digital marketing campaigns.\n- Manage social media channels and optimize advertisements.\n- Analyze campaign effectiveness and report results.\n\nCandidate Requirements:\n- Experience in digital marketing.\n- Analytical skills and proficiency in online marketing tools.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7480),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Digital Marketing Specialist",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("19caef04-429a-4b2f-bfc2-753dc6b47567"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7483),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7484),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Analyze business requirements and processes.\n- Collaborate with departments to improve operational efficiency.\n- Prepare analytical documents and reports for management.\n\nCandidate Requirements:\n- Experience in business analysis.\n- Good communication and teamwork skills.\n- Graduate in business administration or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7484),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Business Analyst",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("6c16179c-379f-4bc6-aa3a-2061ed177c3a"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7488),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7489),
                            IndustryId = 7,
                            JobDescription = "Position Overview:\n- Provide customer support via phone, email, and chat.\n- Resolve customer issues quickly and effectively.\n- Collect customer feedback to improve services.\n\nCandidate Requirements:\n- Good communication and listening skills.\n- Experience in customer service is an advantage.\n- Graduate from vocational school or higher.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7489),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Customer Support Specialist",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("4b932f05-563b-4088-b3a1-95ab5961ff85"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7496),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7497),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Develop and maintain mobile applications on iOS and Android.\n- Participate in product design and development processes.\n- Optimize application performance.\n\nCandidate Requirements:\n- Experience with Swift, Kotlin, or React Native.\n- Creative problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7497),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Mobile App Developer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("3fec9393-5be4-4d9a-9e3f-08db3594aeb3"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7501),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7502),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design and implement cloud computing solutions.\n- Manage infrastructure and data security in the cloud.\n- Optimize costs and system performance.\n\nCandidate Requirements:\n- Experience with AWS, Azure, or Google Cloud.\n- Programming skills and understanding of computer networks.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7502),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Cloud Engineer",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("57fe3f04-09f8-4ade-b881-71f975ff0cce"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7506),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7507),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Analyze and assess security risks.\n- Implement measures to protect information systems.\n- Monitor and respond to security incidents.\n\nCandidate Requirements:\n- Experience in cybersecurity.\n- Certifications such as CISSP or CEH are a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7506),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Cybersecurity Analyst",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("052892fd-40e9-47e9-ad18-a7079e8d774e"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7511),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7512),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Manage and maintain the company's databases.\n- Optimize query performance and data security.\n- Support users in accessing and using databases.\n\nCandidate Requirements:\n- Experience with SQL Server, MySQL, or Oracle.\n- Strong analytical and problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7512),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Database Administrator",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("25970497-903e-40f4-a2aa-f2f8bb3ef14d"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7516),
                            ExpiredAt = new DateTime(2024, 11, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7517),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Plan and implement marketing campaigns.\n- Manage marketing budgets and report results.\n- Analyze market trends and customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in marketing.\n- Strong leadership and communication skills.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7516),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Marketing Manager",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7306),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7309),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7310),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be695160-5698-4dda-8e0d-63f7fc7036f7"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7264),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("7c9d1ddc-51e9-400e-9acb-e9e3ea0d1115")
                        },
                        new
                        {
                            Id = new Guid("6fb1bcf4-a939-4781-a7e6-24cde1044757"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7270),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029")
                        },
                        new
                        {
                            Id = new Guid("695cfb22-68ba-47fc-aaec-7715a146c7f2"),
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7272),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("e16702dc-edc3-4311-950a-5c78a273f377")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c9d1ddc-51e9-400e-9acb-e9e3ea0d1115"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7213),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("2a05cb86-de0a-456e-aa0f-feb165433029"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7223),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("e16702dc-edc3-4311-950a-5c78a273f377"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 30, 9, 14, 40, 911, DateTimeKind.Utc).AddTicks(7227),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
