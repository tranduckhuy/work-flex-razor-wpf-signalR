// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107021033_Add_Payment")]
    partial class Add_Payment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8812),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8816),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8818),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8819),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8820),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8822),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8823),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8824),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8825),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8826),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f0f3a3a-205b-4ae5-9cc1-d4a4303a962e"),
                            ApplicationDate = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(9102),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("bb1a3759-0d99-4014-a7a6-7bee94d53d4d"),
                            Status = 2,
                            UserId = new Guid("2af1bd7b-1923-4c3d-b560-9f9051dcedcd")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb1a3759-0d99-4014-a7a6-7bee94d53d4d"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8874),
                            IndustryId = 4,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm và phát triển khách hàng mới cho tạp hóa.\n- Đạt được mục tiêu doanh số hàng tháng của cửa hàng.\n- Hỗ trợ khách hàng trong quá trình mua sắm tại tạp hóa.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực bán hàng hoặc tạp hóa.\n- Kỹ năng giao tiếp tốt và thân thiện với khách hàng.\n- Có khả năng làm việc theo nhóm và độc lập.",
                            JobLocation = "Tạp Hóa Anh Ba, Đường Lê Lợi, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8873),
                            SalaryRange = "100 - 150",
                            Status = 0,
                            Title = "Nhân Viên Bán Hàng Tạp Hóa Anh Ba",
                            UserId = new Guid("6ba8ae20-95b9-4bfb-b8dd-73cc81146ae3")
                        },
                        new
                        {
                            Id = new Guid("42d960d1-9f78-49e4-97c6-98ed62d52d70"),
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8894),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật của khách hàng.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về công nghệ thông tin.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà B, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8893),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("008e0aac-7601-4036-9a9a-94833ca0d9ca"),
                            CreatedAt = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8900),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả chiến dịch.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà C, Đường Nguyễn Huệ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8900),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Marketing",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("8899a774-96f7-4286-baeb-284be3ab29af"),
                            CreatedAt = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8906),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ khách hàng qua điện thoại và email.\n- Giải quyết các vấn đề của khách hàng.\n- Cung cấp thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp và lắng nghe tốt.\n- Có khả năng làm việc dưới áp lực.\n- Chịu khó và cầu tiến.",
                            JobLocation = "Tòa nhà D, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8905),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Khách Hàng Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("9c66ad77-530d-47e0-bde5-e0da3f0b1b7a"),
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8911),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm khách hàng và giới thiệu sản phẩm.\n- Đạt được chỉ tiêu doanh số tháng.\n- Duy trì mối quan hệ với khách hàng hiện tại.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc độc lập và theo nhóm.",
                            JobLocation = "Tòa nhà E, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8910),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Kinh Doanh Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("702ecc2f-9294-4d79-a56e-dcc71bde5d46"),
                            CreatedAt = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8922),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích dữ liệu và báo cáo kết quả.\n- Tham gia các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà F, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8921),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Marketing Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("c4a24c83-c62e-4753-95a9-509564bd9e20"),
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8927),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn sản phẩm cho khách hàng.\n- Hỗ trợ giải quyết thắc mắc của khách hàng.\n- Cập nhật thông tin về sản phẩm mới.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà G, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8927),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Tư Vấn Khách Hàng Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("51a2536c-15f8-4741-b7aa-19bceb896c6b"),
                            CreatedAt = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8934),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về kỹ thuật.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà H, Đường Phạm Văn Đồng, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8933),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("d7d2553b-fb84-4c69-9fbf-309618219440"),
                            CreatedAt = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8940),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích và báo cáo kết quả chiến dịch.\n- Tham gia vào các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà I, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8939),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Marketing Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("4a8232f3-39be-4096-8319-5fe7ae4ac394"),
                            CreatedAt = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8948),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ thực hiện các kế hoạch kinh doanh.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà J, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8947),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kinh Doanh",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("b2d85e01-cf15-4ee9-817d-a07b21c9732c"),
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8954),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing số.\n- Theo dõi và phân tích dữ liệu trên các kênh truyền thông.\n- Cập nhật thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà K, Đường Trần Phú, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8953),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Digital Marketing",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("756c1518-8353-4a12-b69b-a29363226958"),
                            CreatedAt = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8959),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật trong các dự án IT.\n- Học hỏi và phát triển kỹ năng chuyên môn.\n- Tham gia vào các công việc hàng ngày của nhóm kỹ thuật.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành IT.\n- Có kiến thức cơ bản về lập trình.\n- Nhiệt tình và ham học hỏi.",
                            JobLocation = "Tòa nhà L, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8958),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kỹ Thuật IT",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("c7919cd3-c973-4771-bdae-b7d965dfebe6"),
                            CreatedAt = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8964),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và thực hiện các chiến dịch marketing.\n- Quản lý ngân sách marketing và báo cáo kết quả.\n- Phân tích xu hướng thị trường và nhu cầu khách hàng.\n\nYêu cầu ứng viên:\n- Tối thiểu 3 năm kinh nghiệm trong lĩnh vực marketing.\n- Kỹ năng lãnh đạo và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà M, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8963),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Quản Lý Marketing",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("ed4afb35-486d-4aad-85f0-fe129d9b1c74"),
                            CreatedAt = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8969),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phân tích dữ liệu để đưa ra quyết định chiến lược.\n- Tạo báo cáo và trình bày kết quả phân tích.\n- Hỗ trợ các bộ phận khác trong việc sử dụng dữ liệu.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong phân tích dữ liệu.\n- Kỹ năng sử dụng các công cụ phân tích và báo cáo.\n- Tốt nghiệp chuyên ngành thống kê, kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà N, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8969),
                            SalaryRange = "2000 - 3000",
                            Status = 0,
                            Title = "Chuyên Viên Phân Tích Dữ Liệu",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("0bdd0906-19a8-4352-99c8-df1df481183c"),
                            CreatedAt = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8974),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì mối quan hệ với khách hàng.\n- Đạt được mục tiêu doanh số hàng tháng.\n- Phân tích nhu cầu của khách hàng để đề xuất các giải pháp phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà O, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8974),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Chuyên Viên Kinh Doanh",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("796aec43-40b5-4a02-a2bd-728587183aa3"),
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8980),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì các ứng dụng phần mềm.\n- Làm việc với các nhóm để phát triển sản phẩm.\n- Thực hiện kiểm thử và sửa lỗi phần mềm.\n\nYêu cầu ứng viên:\n- Có ít nhất 2 năm kinh nghiệm lập trình.\n- Thành thạo một hoặc nhiều ngôn ngữ lập trình.\n- Kỹ năng làm việc nhóm và giải quyết vấn đề tốt.",
                            JobLocation = "Tòa nhà P, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8979),
                            SalaryRange = "3000 - 4000",
                            Status = 0,
                            Title = "Kỹ Sư Phần Mềm",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("93734c3e-8f85-4986-9612-19af729a3604"),
                            CreatedAt = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8985),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và giám sát tiến độ dự án.\n- Quản lý nguồn lực và ngân sách dự án.\n- Đảm bảo các mục tiêu dự án được thực hiện đúng hạn.\n\nYêu cầu ứng viên:\n- Tối thiểu 5 năm kinh nghiệm trong quản lý dự án.\n- Kỹ năng lãnh đạo và quản lý tốt.\n- Tốt nghiệp chuyên ngành quản trị kinh doanh hoặc tương đương.",
                            JobLocation = "Tòa nhà Q, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8984),
                            SalaryRange = "4000 - 5000",
                            Status = 0,
                            Title = "Giám Đốc Dự Án",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("4f9715a8-682b-4f4a-a9a5-1e2c9735dad7"),
                            CreatedAt = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8993),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn và quản lý các dịch vụ tài chính cho khách hàng.\n- Phân tích và đánh giá tình hình tài chính của khách hàng.\n- Xây dựng các kế hoạch tài chính phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực tài chính hoặc ngân hàng.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành tài chính hoặc tương đương.",
                            JobLocation = "Tòa nhà R, Đường Trần Nhân Tông, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8992),
                            SalaryRange = "3500 - 4500",
                            Status = 0,
                            Title = "Chuyên Viên Tư Vấn Tài Chính",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("f7948a58-cbd7-4482-987b-3d2ed01a3eee"),
                            CreatedAt = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8998),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ tổ chức và quản lý các sự kiện.\n- Liên lạc với các nhà cung cấp và khách hàng.\n- Đảm bảo mọi thứ diễn ra suôn sẻ trong sự kiện.\n\nYêu cầu ứng viên:\n- Kỹ năng tổ chức và giao tiếp tốt.\n- Có khả năng làm việc dưới áp lực cao.\n- Nhiệt tình và sáng tạo.",
                            JobLocation = "Tòa nhà S, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8997),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Tổ Chức Sự Kiện Part-time",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("f0dc8acf-3170-402a-8cf0-65f50ab545f9"),
                            CreatedAt = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(9003),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Nghiên cứu và phân tích thị trường để phát triển chiến lược.\n- Phát triển mối quan hệ với khách hàng và đối tác.\n- Tạo báo cáo và đề xuất các giải pháp kinh doanh.\n\nYêu cầu ứng viên:\n- Tối thiểu 2 năm kinh nghiệm trong phát triển thị trường.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành kinh tế, marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà T, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(9002),
                            SalaryRange = "3.000 - 7.000",
                            Status = 0,
                            Title = "Chuyên Viên Phát Triển Thị Trường",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8778),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8781),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8783),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDestinationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RequiredAmount")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7c661e0-a312-4f82-abbe-a168c47fa2aa"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8691),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("3b290f2f-3519-4074-bdc7-a5c121acb182")
                        },
                        new
                        {
                            Id = new Guid("c1ccbaed-34bf-48f3-bd8e-7a2347f032f9"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8697),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("b92b642d-5cf8-4794-836f-b21863e41123")
                        },
                        new
                        {
                            Id = new Guid("be152c6d-8e5a-4779-a386-1f9f674a4556"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8700),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("2af1bd7b-1923-4c3d-b560-9f9051dcedcd")
                        },
                        new
                        {
                            Id = new Guid("98955670-3c38-4624-a918-c8f7229acc01"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8702),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("5dfc717c-7ff1-4676-b361-d27bfa27ca77")
                        },
                        new
                        {
                            Id = new Guid("5e4a2967-f372-4f37-99bd-4f1239797543"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8714),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("6ba8ae20-95b9-4bfb-b8dd-73cc81146ae3")
                        },
                        new
                        {
                            Id = new Guid("0e451c29-23ad-44ef-b47f-e7e3ca9d549b"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8717),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("45ea1d94-7c7f-4850-8d82-86800c9669cc")
                        },
                        new
                        {
                            Id = new Guid("c29343cd-93ba-4e75-b7cc-b250bcace30e"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8722),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("45ca245c-118a-4c3f-bb13-a95a52dc7f9d")
                        },
                        new
                        {
                            Id = new Guid("57bbd3d5-3cd0-4d17-805c-44d71e6733ef"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8725),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9ce8e394-a24a-4b53-9087-7b783e4e8fce")
                        },
                        new
                        {
                            Id = new Guid("e509f5d8-0204-41cb-9501-cd48e16250bf"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8727),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("68f4e66a-c7b2-4f7d-907f-e6ae76552237")
                        },
                        new
                        {
                            Id = new Guid("598391c4-7fe0-467d-a9ce-3dbcbd7c3923"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8729),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("a6993297-a828-46fe-a5fc-40a9fc05b9c9")
                        },
                        new
                        {
                            Id = new Guid("8d3776f8-af14-4d94-a662-ef536f6e2c77"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8731),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f41618b5-2788-4cec-ad25-1935614e94f5")
                        },
                        new
                        {
                            Id = new Guid("6ea15326-61eb-4cf1-bfc0-2f177b3d8696"),
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8733),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("b7084356-1618-46ef-81b2-c33cc554e99f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b290f2f-3519-4074-bdc7-a5c121acb182"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftjw6hg_1730428353803_table-img1.png?alt=media&token=fa6ddab5-418a-4cfb-ab75-2aa0d578c164",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 11, 7, 2, 10, 33, 85, DateTimeKind.Utc).AddTicks(8560),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            SubscriptionType = 2,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("b92b642d-5cf8-4794-836f-b21863e41123"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F2q2joa_1730428345764_vendor-14.png?alt=media&token=75952a9b-a099-4ec3-acc5-3240f0839dd2",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            SubscriptionType = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("2af1bd7b-1923-4c3d-b560-9f9051dcedcd"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F17mshd_1730428341488_vendor-13.png?alt=media&token=33092b37-f077-4863-9329-63fa6e5964f7",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "jobseeker"
                        },
                        new
                        {
                            Id = new Guid("5dfc717c-7ff1-4676-b361-d27bfa27ca77"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fwobtrg_1730428336088_vendor-11.png?alt=media&token=306e81e3-dee1-4e09-bd09-0ea22d9bcd66",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnweek@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Week",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zWTkYvKaD2nrl/FIEzZvAus4fK1zT5kIk9U.IrzNxHZOzLxYzIYNe",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 1,
                            Username = "johnweek"
                        },
                        new
                        {
                            Id = new Guid("6ba8ae20-95b9-4bfb-b8dd-73cc81146ae3"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Frijtlx_1730428289939_vendor-1.png?alt=media&token=529439ae-4bc1-4c9a-ad2a-6d97f0c5ae25",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmau-cua-hang-tap-hoa-12-aeros.webp?alt=media&token=55cb771a-c564-4d29-b0fa-f6cccea186e2",
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huytdqe170235@fpt.edu.vn",
                            FirstName = "Tran Duck",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Huy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$MNV7kUVAks5PkB4cMD8cNuLvONZlKt/ej7.hCdRTGyj4F/csD8oKK",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 0,
                            Username = "tranduckhuy"
                        },
                        new
                        {
                            Id = new Guid("45ea1d94-7c7f-4850-8d82-86800c9669cc"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F9xi15_1730428296376_vendor-2.png?alt=media&token=e850aa0f-9798-45da-851a-1b4a7bc6726d",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sangtnqe170193@fpt.edu.vn",
                            FirstName = "Tran Ngoc",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Sang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$CwxlScy8xNpcrGL/2sg7V.vDUC1zh.QOjZD1qefQgxmq3vn0Q7R9.",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "sang"
                        },
                        new
                        {
                            Id = new Guid("45ca245c-118a-4c3f-bb13-a95a52dc7f9d"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fvn1m3b_1730428306808_vendor-4.png?alt=media&token=f1e61339-1c7f-4065-acbf-d49a012dc604",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quynxqe170239@fpt.edu.vn",
                            FirstName = "Nguyen Xuan",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Quy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$O/urkLFsFi/GN9s0asTeZ.3YnvDozIBPXS5vpDbl6Kvz4RsxZYRIS",
                            Phone = "",
                            RoleId = 2,
                            SubscriptionType = 2,
                            Username = "quy"
                        },
                        new
                        {
                            Id = new Guid("9ce8e394-a24a-4b53-9087-7b783e4e8fce"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Faq8ir_1730428301407_vendor-3.png?alt=media&token=295216c1-4ea0-4a0c-8a61-3c66200f41bb",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haonnqe170204@fpt.edu.vn",
                            FirstName = "Nguyen Nhat",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hao",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$KcwDWaYdePFeLgKTwoJd7OQl6YCi9ZvCzdPDdt7lROYp2paxwpyGC",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "hao"
                        },
                        new
                        {
                            Id = new Guid("68f4e66a-c7b2-4f7d-907f-e6ae76552237"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftvujfq_1730428311602_vendor-5.png?alt=media&token=65db1056-55f6-4620-990b-c3641807507f",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thuanndmqe170240@fpt.edu.vn",
                            FirstName = "Nguyen Dao",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Minh Thuan",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$3hGHatEPOSTNLlvBEUMw.uxZMLNxLz74/Ls47cvbccwwlJlhFELqS",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "thuan"
                        },
                        new
                        {
                            Id = new Guid("a6993297-a828-46fe-a5fc-40a9fc05b9c9"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fkxakd5_1730428320184_vendor-7.png?alt=media&token=9a4cabc8-8372-45d8-9d3e-364766154550",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoangngqe170225@fpt.edu.vn",
                            FirstName = "Ngo Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hoang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$aYH6ji8QMczfCJxRGoBUqeTA7Ttk1JnanbTXBiafDDrrOQcy6hK7O",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "hoang"
                        },
                        new
                        {
                            Id = new Guid("f41618b5-2788-4cec-ad25-1935614e94f5"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ffc2hi5_1730428324559_vendor-9.png?alt=media&token=fa4632f1-2584-4496-9927-d0a645413638",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thinhhqgqs170196@fpt.edu.vn",
                            FirstName = "Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Thinh",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$kzs6W6lPdNmhq9mAxWfov.FJAHD2YDQJgQ/oiDeeMo78LKzDExz2O",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 2,
                            Username = "thinh"
                        },
                        new
                        {
                            Id = new Guid("b7084356-1618-46ef-81b2-c33cc554e99f"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmrcf7_1730428331026_vendor-10.png?alt=media&token=9e787b31-eea6-4f38-a2c2-fa3c8a2140e1",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nghia@example.com",
                            FirstName = "Trong",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Nghia",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zD2J2lknJ27rADmUbwJM9eSS0sX16W/FUw/xVx7XauSjOuxauzeZa",
                            Phone = "",
                            RoleId = 3,
                            SubscriptionType = 0,
                            Username = "nghia"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Payment", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Payments");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
