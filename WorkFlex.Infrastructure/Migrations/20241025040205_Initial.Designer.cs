// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241025040205_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2029),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2032),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2032),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2033),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2034),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2034),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2035),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2036),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2036),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2037),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11a72a3d-1a93-43db-8bd1-7a2dc3d40037"),
                            ApplicationDate = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2180),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("1042b213-a576-40a4-b90e-55ec7858259d"),
                            Status = 2,
                            UserId = new Guid("f7755a76-5c34-472c-a3c7-6e7b88c2ad4f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1042b213-a576-40a4-b90e-55ec7858259d"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2067),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2068),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Develop and maintain web applications.\n- Participate in the design and product development process.\n- Optimize performance and security of web applications.\n\nCandidate Requirements:\n- Experience with HTML, CSS, JavaScript, and PHP.\n- Problem-solving skills and logical thinking.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà A, Số 12, Phố Nguyễn Trãi, Quận Thanh Xuân, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2068),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Web Developer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("120361d1-1fed-4103-a2d5-5c198d06728e"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2081),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2082),
                            IndustryId = 2,
                            JobDescription = "Job Description:\n- Analyze data and create reports for management.\n- Use analytical tools to detect data trends.\n- Collaborate with other departments to improve processes based on data.\n\nCandidate Requirements:\n- Experience with Excel, SQL, and data analysis tools.\n- Communication and data presentation skills.\n- Graduate in statistics, mathematics, or equivalent.",
                            JobLocation = "Văn phòng 5, Số 23, Phố Lê Duẩn, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2082),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Data Analyst",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("aedb36cf-42d5-47e0-bcfd-a6139b4dba26"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2085),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2085),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Design user interfaces for applications and websites.\n- Research and analyze user needs to improve experiences.\n- Create design prototypes and collaborate with development teams.\n\nCandidate Requirements:\n- Experience with Figma, Sketch, or Adobe XD.\n- Good communication and teamwork skills.\n- Graduate in design or equivalent.",
                            JobLocation = "Tầng 2, Số 45, Phố Lê Lai, Quận 1, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2085),
                            SalaryRange = "1800 - 2200",
                            Status = 0,
                            Title = "UX/UI Designer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("828ccd46-20ab-4249-931f-cbf7441d81d8"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2088),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2088),
                            IndustryId = 2,
                            JobDescription = "Job Description:\n- Manage the recruitment and training processes for new employees.\n- Develop HR policies and manage performance.\n- Advise management on HR-related issues.\n\nCandidate Requirements:\n- At least 3 years of experience in a similar position.\n- Strong communication and leadership skills.\n- Graduate in human resource management or equivalent.",
                            JobLocation = "Văn phòng 3, Số 78, Phố Nguyễn Trãi, Quận Thanh Xuân, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2088),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "HR Manager",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("70453267-2341-4a47-9d7e-99a4e4e10578"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2091),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2091),
                            IndustryId = 8,
                            JobDescription = "Job Description:\n- Design graphic products for marketing campaigns.\n- Collaborate with other departments to create creative content.\n- Maintain the company’s brand and design style.\n\nCandidate Requirements:\n- Experience with Adobe Illustrator, Photoshop.\n- Creative thinking and ability to work under pressure.\n- Graduate in graphic design or equivalent.",
                            JobLocation = "Tầng trệt, Số 92, Phố Võ Văn Kiệt, Quận 1, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2091),
                            SalaryRange = "1200 - 1500",
                            Status = 0,
                            Title = "Graphic Designer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("a79fc53c-08df-4a2b-ba7d-772210541a0d"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2101),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2101),
                            IndustryId = 8,
                            JobDescription = "Job Description:\n- Write content for blogs, websites, and social media.\n- Research and develop new content topics.\n- Optimize content for SEO.\n\nCandidate Requirements:\n- Good writing and editing skills.\n- Experience in content writing is a plus.\n- Graduate in journalism, communication, or equivalent.",
                            JobLocation = "Văn phòng 10, Số 56, Phố Nguyễn Thị Minh Khai, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2101),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Content Writer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("1d90bfb7-d319-482f-a86c-1c9b44180acf"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2104),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2104),
                            IndustryId = 4,
                            JobDescription = "Job Description:\n- Seek and develop new customers.\n- Conduct calls and meet clients to introduce products.\n- Achieve monthly sales targets.\n\nCandidate Requirements:\n- Experience in sales.\n- Good communication and persuasion skills.\n- University graduate in business or equivalent.",
                            JobLocation = "Văn phòng 4, Số 150, Phố Trần Hưng Đạo, Quận 5, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2104),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Sales Executive",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("e3c7429d-d38a-4a07-a264-70f31de5b503"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2107),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2108),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Design and implement computer networks.\n- Monitor and maintain network systems.\n- Troubleshoot network-related issues.\n\nCandidate Requirements:\n- Experience with networking equipment.\n- CCNA certification is a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà B, Số 34, Phố Lê Văn Sỹ, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2107),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Network Engineer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("7fbe173d-1d48-4682-8c65-9dbd2f169090"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2112),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2112),
                            IndustryId = 8,
                            JobDescription = "Job Description:\n- Optimize websites to improve search engine rankings.\n- Research and analyze keywords.\n- Monitor and report on SEO performance.\n\nCandidate Requirements:\n- Experience in SEO.\n- Good analytical and problem-solving skills.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 7, Số 88, Phố Nguyễn Đình Chiểu, Quận 1, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2112),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "SEO Specialist",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("e942dcef-ce41-438d-9b48-18167b98cd92"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2115),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2115),
                            IndustryId = 2,
                            JobDescription = "Job Description:\n- Responsible for product development and management.\n- Coordinate with departments to ensure product timelines.\n- Research market trends and analyze customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in product management.\n- Strong leadership and communication skills.\n- Graduate in business management or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2115),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Product Manager",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("7fde71d8-3261-4e41-9d3b-0d66306e11c7"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2118),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2118),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Perform software testing to ensure product quality.\n- Analyze and report bugs.\n- Collaborate with development engineers to improve testing processes.\n\nCandidate Requirements:\n- Experience in software testing.\n- Understanding of software development processes.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2118),
                            SalaryRange = "1500 - 1800",
                            Status = 0,
                            Title = "Software Tester",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("7368b384-bb7b-4326-b084-caf8087f8c70"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2121),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2121),
                            IndustryId = 4,
                            JobDescription = "Job Description:\n- Analyze financial situations and prepare financial reports.\n- Provide investment and risk management recommendations.\n- Monitor and analyze market trends.\n\nCandidate Requirements:\n- Experience in financial analysis.\n- Strong analytical and reporting skills.\n- Graduate in finance or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2121),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Financial Analyst",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("143300d3-9561-4b91-8961-8eaeb9e75a51"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2124),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2124),
                            IndustryId = 8,
                            JobDescription = "Job Description:\n- Build and implement digital marketing campaigns.\n- Manage social media channels and optimize advertisements.\n- Analyze campaign effectiveness and report results.\n\nCandidate Requirements:\n- Experience in digital marketing.\n- Analytical skills and proficiency in online marketing tools.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2124),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Digital Marketing Specialist",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("71d5e743-2b30-4a9f-8534-ec3ba5f9798a"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2126),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2127),
                            IndustryId = 4,
                            JobDescription = "Job Description:\n- Analyze business requirements and processes.\n- Collaborate with departments to improve operational efficiency.\n- Prepare analytical documents and reports for management.\n\nCandidate Requirements:\n- Experience in business analysis.\n- Good communication and teamwork skills.\n- Graduate in business administration or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2127),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Business Analyst",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("caeebf14-d12e-4d02-84a8-bd40e9587a02"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2129),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2130),
                            IndustryId = 7,
                            JobDescription = "Job Description:\n- Provide customer support via phone, email, and chat.\n- Resolve customer issues quickly and effectively.\n- Collect customer feedback to improve services.\n\nCandidate Requirements:\n- Good communication and listening skills.\n- Experience in customer service is an advantage.\n- Graduate from vocational school or higher.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2130),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Customer Support Specialist",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("93d23b45-2217-45e8-9acb-a907287caf62"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2132),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2134),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Develop and maintain mobile applications on iOS and Android.\n- Participate in product design and development processes.\n- Optimize application performance.\n\nCandidate Requirements:\n- Experience with Swift, Kotlin, or React Native.\n- Creative problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2134),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Mobile App Developer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("4729b89a-4019-4883-8ef4-e3d201b40747"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2138),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2139),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Design and implement cloud computing solutions.\n- Manage infrastructure and data security in the cloud.\n- Optimize costs and system performance.\n\nCandidate Requirements:\n- Experience with AWS, Azure, or Google Cloud.\n- Programming skills and understanding of computer networks.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2138),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Cloud Engineer",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("2641b128-0308-43ae-ab5d-2a469b97fc48"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2141),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2142),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Analyze and assess security risks.\n- Implement measures to protect information systems.\n- Monitor and respond to security incidents.\n\nCandidate Requirements:\n- Experience in cybersecurity.\n- Certifications such as CISSP or CEH are a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2141),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Cybersecurity Analyst",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("02e34f01-3c96-487f-acb5-d99d0e2606df"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2144),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2144),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Manage and maintain the company's databases.\n- Optimize query performance and data security.\n- Support users in accessing and using databases.\n\nCandidate Requirements:\n- Experience with SQL Server, MySQL, or Oracle.\n- Strong analytical and problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2144),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Database Administrator",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("f4d6969d-a090-4dbb-a4aa-8b25c56480e2"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2147),
                            ExpiredAt = new DateTime(2024, 11, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2147),
                            IndustryId = 2,
                            JobDescription = "Job Description:\n- Plan and implement marketing campaigns.\n- Manage marketing budgets and report results.\n- Analyze market trends and customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in marketing.\n- Strong leadership and communication skills.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2147),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Marketing Manager",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2007),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2009),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2010),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("687a0532-cdc8-49f4-ab4a-25ae6eab6438"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1980),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("cf1c3d4e-6e07-43cd-b237-6f94366d466f")
                        },
                        new
                        {
                            Id = new Guid("75a58bdb-3c38-4817-bde4-6979c0034739"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1987),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("69350bda-5910-4a19-98a9-90f4695b2975")
                        },
                        new
                        {
                            Id = new Guid("7851a8ec-b85c-47a5-a780-f9a5e85d97a2"),
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1989),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f7755a76-5c34-472c-a3c7-6e7b88c2ad4f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1c3d4e-6e07-43cd-b237-6f94366d466f"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1951),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("69350bda-5910-4a19-98a9-90f4695b2975"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1954),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("f7755a76-5c34-472c-a3c7-6e7b88c2ad4f"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(1957),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
