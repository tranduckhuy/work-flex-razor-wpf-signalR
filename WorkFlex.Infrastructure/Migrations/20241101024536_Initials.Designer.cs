// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241101024536_Initials")]
    partial class Initials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7106),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7108),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7109),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7109),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7110),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7111),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7111),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7112),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7113),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7113),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("612e143c-1a95-47fb-af97-a69a2623802b"),
                            ApplicationDate = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7245),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("00c62130-f022-4b1e-a39b-8d9dccf5849b"),
                            Status = 2,
                            UserId = new Guid("c5b3686c-b4fc-4d03-bbb9-9506546fb05e")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("962b8ca7-e945-4522-bce9-68ceed71e345"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7147),
                            IndustryId = 4,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm và phát triển khách hàng mới cho tạp hóa.\n- Đạt được mục tiêu doanh số hàng tháng của cửa hàng.\n- Hỗ trợ khách hàng trong quá trình mua sắm tại tạp hóa.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực bán hàng hoặc tạp hóa.\n- Kỹ năng giao tiếp tốt và thân thiện với khách hàng.\n- Có khả năng làm việc theo nhóm và độc lập.",
                            JobLocation = "Tạp Hóa Anh Ba, Đường Lê Lợi, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7146),
                            SalaryRange = "100 - 150",
                            Status = 0,
                            Title = "Nhân Viên Bán Hàng Tạp Hóa Anh Ba",
                            UserId = new Guid("81b8c843-361c-4be3-8a06-d4b561d9c21d")
                        },
                        new
                        {
                            Id = new Guid("7b88f2fe-bb07-4a7f-bd31-9257037f15d4"),
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7157),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật của khách hàng.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về công nghệ thông tin.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà B, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7156),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("28ad300e-6f01-48b3-a61a-83b383160047"),
                            CreatedAt = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7160),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả chiến dịch.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà C, Đường Nguyễn Huệ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7160),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Marketing",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("dcf4f6e4-1083-44a7-a292-d4187b2c50f7"),
                            CreatedAt = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7164),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ khách hàng qua điện thoại và email.\n- Giải quyết các vấn đề của khách hàng.\n- Cung cấp thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp và lắng nghe tốt.\n- Có khả năng làm việc dưới áp lực.\n- Chịu khó và cầu tiến.",
                            JobLocation = "Tòa nhà D, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7164),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Khách Hàng Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("6df0caf8-28f9-4966-bae9-86a882ceeb09"),
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7167),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tìm kiếm khách hàng và giới thiệu sản phẩm.\n- Đạt được chỉ tiêu doanh số tháng.\n- Duy trì mối quan hệ với khách hàng hiện tại.\n\nYêu cầu ứng viên:\n- Có kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc độc lập và theo nhóm.",
                            JobLocation = "Tòa nhà E, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7167),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Kinh Doanh Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("98c45392-a68a-4bd8-bee2-1cd23a861f34"),
                            CreatedAt = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7171),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích dữ liệu và báo cáo kết quả.\n- Tham gia các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà F, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7171),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Marketing Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("e37691b6-152c-434e-a70e-bdd108a975be"),
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7174),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn sản phẩm cho khách hàng.\n- Hỗ trợ giải quyết thắc mắc của khách hàng.\n- Cập nhật thông tin về sản phẩm mới.\n\nYêu cầu ứng viên:\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà G, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7174),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Tư Vấn Khách Hàng Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("dccd0b74-8e07-45c3-8b6d-0f841bbb283f"),
                            CreatedAt = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7177),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật cho các sản phẩm công nghệ.\n- Giải quyết các sự cố kỹ thuật.\n- Tham gia vào các dự án nhỏ theo yêu cầu.\n\nYêu cầu ứng viên:\n- Có kiến thức về kỹ thuật.\n- Kỹ năng giải quyết vấn đề tốt.\n- Có khả năng làm việc độc lập.",
                            JobLocation = "Tòa nhà H, Đường Phạm Văn Đồng, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7177),
                            SalaryRange = "700 - 1000",
                            Status = 0,
                            Title = "Nhân Viên Kỹ Thuật Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("07296988-143c-4f7b-ace5-858de51b4b56"),
                            CreatedAt = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7180),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing.\n- Phân tích và báo cáo kết quả chiến dịch.\n- Tham gia vào các hoạt động quảng bá sản phẩm.\n\nYêu cầu ứng viên:\n- Có kiến thức về marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và ham học hỏi.",
                            JobLocation = "Tòa nhà I, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7180),
                            SalaryRange = "600 - 900",
                            Status = 0,
                            Title = "Nhân Viên Hỗ Trợ Marketing Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("2a1ce1b7-38fb-4ba4-b0e1-99627a20208c"),
                            CreatedAt = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7183),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ thực hiện các kế hoạch kinh doanh.\n- Nghiên cứu thị trường và phân tích dữ liệu khách hàng.\n- Theo dõi và báo cáo kết quả.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành kinh doanh.\n- Kỹ năng giao tiếp tốt.\n- Có khả năng làm việc nhóm.",
                            JobLocation = "Tòa nhà J, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7182),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kinh Doanh",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("63ac18f0-b475-4ec0-b2a2-48052f3693a0"),
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7186),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ lập kế hoạch và thực hiện các chiến dịch marketing số.\n- Theo dõi và phân tích dữ liệu trên các kênh truyền thông.\n- Cập nhật thông tin về sản phẩm và dịch vụ.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành marketing.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Chịu khó và nhiệt tình.",
                            JobLocation = "Tòa nhà K, Đường Trần Phú, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7185),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Digital Marketing",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("0675be32-2b2b-4825-83aa-db9bbb92ba41"),
                            CreatedAt = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7189),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ kỹ thuật trong các dự án IT.\n- Học hỏi và phát triển kỹ năng chuyên môn.\n- Tham gia vào các công việc hàng ngày của nhóm kỹ thuật.\n\nYêu cầu ứng viên:\n- Sinh viên năm cuối hoặc mới tốt nghiệp chuyên ngành IT.\n- Có kiến thức cơ bản về lập trình.\n- Nhiệt tình và ham học hỏi.",
                            JobLocation = "Tòa nhà L, Đường Lý Thường Kiệt, Phường Xuân Diệu, Quy Nhơn, Bình Định",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7189),
                            SalaryRange = "400 - 600",
                            Status = 0,
                            Title = "Thực Tập Sinh Kỹ Thuật IT",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("da513892-9883-4675-bdc0-bdbd0a025262"),
                            CreatedAt = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7192),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và thực hiện các chiến dịch marketing.\n- Quản lý ngân sách marketing và báo cáo kết quả.\n- Phân tích xu hướng thị trường và nhu cầu khách hàng.\n\nYêu cầu ứng viên:\n- Tối thiểu 3 năm kinh nghiệm trong lĩnh vực marketing.\n- Kỹ năng lãnh đạo và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà M, Đường Phạm Ngũ Lão, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7192),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Quản Lý Marketing",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("e25371cc-46b2-4d0b-9311-b1c515b88792"),
                            CreatedAt = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7197),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phân tích dữ liệu để đưa ra quyết định chiến lược.\n- Tạo báo cáo và trình bày kết quả phân tích.\n- Hỗ trợ các bộ phận khác trong việc sử dụng dữ liệu.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong phân tích dữ liệu.\n- Kỹ năng sử dụng các công cụ phân tích và báo cáo.\n- Tốt nghiệp chuyên ngành thống kê, kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà N, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7196),
                            SalaryRange = "2000 - 3000",
                            Status = 0,
                            Title = "Chuyên Viên Phân Tích Dữ Liệu",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("21f4b00a-dd45-448b-b6b6-256def944bec"),
                            CreatedAt = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7200),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì mối quan hệ với khách hàng.\n- Đạt được mục tiêu doanh số hàng tháng.\n- Phân tích nhu cầu của khách hàng để đề xuất các giải pháp phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực kinh doanh.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành kinh tế hoặc tương đương.",
                            JobLocation = "Tòa nhà O, Đường Đống Đa, Phường Bình Định, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7199),
                            SalaryRange = "2500 - 3500",
                            Status = 0,
                            Title = "Chuyên Viên Kinh Doanh",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("77341460-3ff5-4e6f-a219-fb38a153b384"),
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7202),
                            IndustryId = 1,
                            JobDescription = "Tổng quan vị trí:\n- Phát triển và duy trì các ứng dụng phần mềm.\n- Làm việc với các nhóm để phát triển sản phẩm.\n- Thực hiện kiểm thử và sửa lỗi phần mềm.\n\nYêu cầu ứng viên:\n- Có ít nhất 2 năm kinh nghiệm lập trình.\n- Thành thạo một hoặc nhiều ngôn ngữ lập trình.\n- Kỹ năng làm việc nhóm và giải quyết vấn đề tốt.",
                            JobLocation = "Tòa nhà P, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7202),
                            SalaryRange = "3000 - 4000",
                            Status = 0,
                            Title = "Kỹ Sư Phần Mềm",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("3efa7f8f-be06-4d75-85cd-ce2bed0ec302"),
                            CreatedAt = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7205),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Lập kế hoạch và giám sát tiến độ dự án.\n- Quản lý nguồn lực và ngân sách dự án.\n- Đảm bảo các mục tiêu dự án được thực hiện đúng hạn.\n\nYêu cầu ứng viên:\n- Tối thiểu 5 năm kinh nghiệm trong quản lý dự án.\n- Kỹ năng lãnh đạo và quản lý tốt.\n- Tốt nghiệp chuyên ngành quản trị kinh doanh hoặc tương đương.",
                            JobLocation = "Tòa nhà Q, Đường Nguyễn Công Trứ, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7205),
                            SalaryRange = "4000 - 5000",
                            Status = 0,
                            Title = "Giám Đốc Dự Án",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("b7ef8af8-8633-4d05-9e0c-8fdaea537fb8"),
                            CreatedAt = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7208),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Tư vấn và quản lý các dịch vụ tài chính cho khách hàng.\n- Phân tích và đánh giá tình hình tài chính của khách hàng.\n- Xây dựng các kế hoạch tài chính phù hợp.\n\nYêu cầu ứng viên:\n- Kinh nghiệm trong lĩnh vực tài chính hoặc ngân hàng.\n- Kỹ năng giao tiếp và thuyết phục tốt.\n- Tốt nghiệp chuyên ngành tài chính hoặc tương đương.",
                            JobLocation = "Tòa nhà R, Đường Trần Nhân Tông, Phường Trần Phú, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7208),
                            SalaryRange = "3500 - 4500",
                            Status = 0,
                            Title = "Chuyên Viên Tư Vấn Tài Chính",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("00f68e78-29a2-461d-903c-b8846724fc96"),
                            CreatedAt = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7211),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Hỗ trợ tổ chức và quản lý các sự kiện.\n- Liên lạc với các nhà cung cấp và khách hàng.\n- Đảm bảo mọi thứ diễn ra suôn sẻ trong sự kiện.\n\nYêu cầu ứng viên:\n- Kỹ năng tổ chức và giao tiếp tốt.\n- Có khả năng làm việc dưới áp lực cao.\n- Nhiệt tình và sáng tạo.",
                            JobLocation = "Tòa nhà S, Đường Nguyễn Thái Học, Phường Lê Lợi, Quy Nhơn, Bình Định",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7210),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Nhân Viên Tổ Chức Sự Kiện Part-time",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("0e6cbb04-eaf4-4591-9590-434050771225"),
                            CreatedAt = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 12, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7214),
                            IndustryId = 2,
                            JobDescription = "Tổng quan vị trí:\n- Nghiên cứu và phân tích thị trường để phát triển chiến lược.\n- Phát triển mối quan hệ với khách hàng và đối tác.\n- Tạo báo cáo và đề xuất các giải pháp kinh doanh.\n\nYêu cầu ứng viên:\n- Tối thiểu 2 năm kinh nghiệm trong phát triển thị trường.\n- Kỹ năng phân tích và giao tiếp tốt.\n- Tốt nghiệp chuyên ngành kinh tế, marketing hoặc tương đương.",
                            JobLocation = "Tòa nhà T, Đường Trần Hưng Đạo, Phường Hải Cảng, Quy Nhơn, Bình Định",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7213),
                            SalaryRange = "3.000 - 7.000",
                            Status = 0,
                            Title = "Chuyên Viên Phát Triển Thị Trường",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7072),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7074),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7075),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d0fee0-290d-451a-bbcb-f799500c6af4"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7028),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9d3dc5ad-c601-4624-9582-8c2058565730")
                        },
                        new
                        {
                            Id = new Guid("602c122c-d6b5-46aa-81b1-c52292ba3a10"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7032),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb")
                        },
                        new
                        {
                            Id = new Guid("40275dbf-e189-4aa2-b2a8-e9d2dfb41799"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7034),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("c5b3686c-b4fc-4d03-bbb9-9506546fb05e")
                        },
                        new
                        {
                            Id = new Guid("37078825-d9e8-4930-b043-e36a3f5d90ce"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7036),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("537b3391-99bb-4a12-99cd-7e0ccd73e75d")
                        },
                        new
                        {
                            Id = new Guid("5a2dc2e6-bacd-4fd5-8a1a-f0dfef630a73"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7038),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("81b8c843-361c-4be3-8a06-d4b561d9c21d")
                        },
                        new
                        {
                            Id = new Guid("89bdfffe-9a47-4ecf-93ec-5aa141633b90"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7039),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("21729287-19ce-4e9c-93ec-ea6ffb3abd8d")
                        },
                        new
                        {
                            Id = new Guid("5269dbb9-a6c8-4d5b-b36d-0c1dbb0c1a73"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7040),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("0ce3dbac-c471-4b84-9df7-688a0b133fad")
                        },
                        new
                        {
                            Id = new Guid("a8ec3fae-9d47-4deb-9f1a-abc222ba7183"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7041),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f4a16290-9899-4bef-869f-1b84c1ccdacb")
                        },
                        new
                        {
                            Id = new Guid("c1e08076-9021-4151-acb5-fdb3f861ee7d"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7042),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f01a631e-156c-449e-8588-062199cbe42e")
                        },
                        new
                        {
                            Id = new Guid("1dbcee83-84c2-4036-a740-d766b48a7519"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7043),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9b200022-54df-47f5-9da8-8cab3e4bf399")
                        },
                        new
                        {
                            Id = new Guid("0c318820-66b2-4b9f-9eed-e17eb7244957"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7044),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("7b6fa5ab-4a91-4149-b533-3a1db30e802b")
                        },
                        new
                        {
                            Id = new Guid("db045101-cd16-4032-8329-2485ae238903"),
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(7047),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("9c7a4b40-df0d-483e-b860-2168153c6abd")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d3dc5ad-c601-4624-9582-8c2058565730"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftjw6hg_1730428353803_table-img1.png?alt=media&token=fa6ddab5-418a-4cfb-ab75-2aa0d578c164",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 11, 1, 2, 45, 35, 638, DateTimeKind.Utc).AddTicks(6956),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("9780b3c8-8bbe-4765-a52a-5f1c9b4277cb"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F2q2joa_1730428345764_vendor-14.png?alt=media&token=75952a9b-a099-4ec3-acc5-3240f0839dd2",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("c5b3686c-b4fc-4d03-bbb9-9506546fb05e"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F17mshd_1730428341488_vendor-13.png?alt=media&token=33092b37-f077-4863-9329-63fa6e5964f7",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        },
                        new
                        {
                            Id = new Guid("537b3391-99bb-4a12-99cd-7e0ccd73e75d"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fwobtrg_1730428336088_vendor-11.png?alt=media&token=306e81e3-dee1-4e09-bd09-0ea22d9bcd66",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnweek@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Week",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zWTkYvKaD2nrl/FIEzZvAus4fK1zT5kIk9U.IrzNxHZOzLxYzIYNe",
                            Phone = "",
                            RoleId = 3,
                            Username = "johnweek"
                        },
                        new
                        {
                            Id = new Guid("81b8c843-361c-4be3-8a06-d4b561d9c21d"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Frijtlx_1730428289939_vendor-1.png?alt=media&token=529439ae-4bc1-4c9a-ad2a-6d97f0c5ae25",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmau-cua-hang-tap-hoa-12-aeros.webp?alt=media&token=55cb771a-c564-4d29-b0fa-f6cccea186e2",
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huy@example.com",
                            FirstName = "Tran Duck",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Huy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$MNV7kUVAks5PkB4cMD8cNuLvONZlKt/ej7.hCdRTGyj4F/csD8oKK",
                            Phone = "",
                            RoleId = 2,
                            Username = "tranduckhuy"
                        },
                        new
                        {
                            Id = new Guid("21729287-19ce-4e9c-93ec-ea6ffb3abd8d"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2F9xi15_1730428296376_vendor-2.png?alt=media&token=e850aa0f-9798-45da-851a-1b4a7bc6726d",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sang@example.com",
                            FirstName = "Tran Ngoc",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Sang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$CwxlScy8xNpcrGL/2sg7V.vDUC1zh.QOjZD1qefQgxmq3vn0Q7R9.",
                            Phone = "",
                            RoleId = 2,
                            Username = "sang"
                        },
                        new
                        {
                            Id = new Guid("0ce3dbac-c471-4b84-9df7-688a0b133fad"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fvn1m3b_1730428306808_vendor-4.png?alt=media&token=f1e61339-1c7f-4065-acbf-d49a012dc604",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quy@example.com",
                            FirstName = "Nguyen Xuan",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Quy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$O/urkLFsFi/GN9s0asTeZ.3YnvDozIBPXS5vpDbl6Kvz4RsxZYRIS",
                            Phone = "",
                            RoleId = 2,
                            Username = "quy"
                        },
                        new
                        {
                            Id = new Guid("f4a16290-9899-4bef-869f-1b84c1ccdacb"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Faq8ir_1730428301407_vendor-3.png?alt=media&token=295216c1-4ea0-4a0c-8a61-3c66200f41bb",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hao@example.com",
                            FirstName = "Nguyen Nhat",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hao",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$KcwDWaYdePFeLgKTwoJd7OQl6YCi9ZvCzdPDdt7lROYp2paxwpyGC",
                            Phone = "",
                            RoleId = 3,
                            Username = "hao"
                        },
                        new
                        {
                            Id = new Guid("f01a631e-156c-449e-8588-062199cbe42e"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ftvujfq_1730428311602_vendor-5.png?alt=media&token=65db1056-55f6-4620-990b-c3641807507f",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thuan@example.com",
                            FirstName = "Nguyen Dao",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Minh Thuan",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$3hGHatEPOSTNLlvBEUMw.uxZMLNxLz74/Ls47cvbccwwlJlhFELqS",
                            Phone = "",
                            RoleId = 3,
                            Username = "thuan"
                        },
                        new
                        {
                            Id = new Guid("9b200022-54df-47f5-9da8-8cab3e4bf399"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fkxakd5_1730428320184_vendor-7.png?alt=media&token=9a4cabc8-8372-45d8-9d3e-364766154550",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang@example.com",
                            FirstName = "Ngo Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hoang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$aYH6ji8QMczfCJxRGoBUqeTA7Ttk1JnanbTXBiafDDrrOQcy6hK7O",
                            Phone = "",
                            RoleId = 3,
                            Username = "hoang"
                        },
                        new
                        {
                            Id = new Guid("7b6fa5ab-4a91-4149-b533-3a1db30e802b"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Ffc2hi5_1730428324559_vendor-9.png?alt=media&token=fa4632f1-2584-4496-9927-d0a645413638",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thinh@example.com",
                            FirstName = "Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Thinh",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$kzs6W6lPdNmhq9mAxWfov.FJAHD2YDQJgQ/oiDeeMo78LKzDExz2O",
                            Phone = "",
                            RoleId = 3,
                            Username = "thinh"
                        },
                        new
                        {
                            Id = new Guid("9c7a4b40-df0d-483e-b860-2168153c6abd"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fmrcf7_1730428331026_vendor-10.png?alt=media&token=9e787b31-eea6-4f38-a2c2-fa3c8a2140e1",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nghia@example.com",
                            FirstName = "Trong",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Nghia",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zD2J2lknJ27rADmUbwJM9eSS0sX16W/FUw/xVx7XauSjOuxauzeZa",
                            Phone = "",
                            RoleId = 3,
                            Username = "nghia"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
