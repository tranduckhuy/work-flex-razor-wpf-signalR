// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4085),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4087),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4088),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4088),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4089),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4090),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4090),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4091),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4091),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4092),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07b6baa3-1e08-4ae4-9e49-4679ebcfe352"),
                            ApplicationDate = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4227),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("060b4b64-28b2-4327-a843-f75410db6bee"),
                            Status = 2,
                            UserId = new Guid("5d9281b1-caf0-4b1b-8817-80be49486873")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("060b4b64-28b2-4327-a843-f75410db6bee"),
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4125),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Develop and maintain web applications.\n- Participate in the design and product development process.\n- Optimize performance and security of web applications.\n\nCandidate Requirements:\n- Experience with HTML, CSS, JavaScript, and PHP.\n- Problem-solving skills and logical thinking.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà A, Số 12, Phố Nguyễn Trãi, Quận Thanh Xuân, Hải Phòng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4124),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Web Developer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("4907c747-a0dc-43a8-994b-cfe5589e97f2"),
                            CreatedAt = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4135),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Analyze data and create reports for management.\n- Use analytical tools to detect data trends.\n- Collaborate with other departments to improve processes based on data.\n\nCandidate Requirements:\n- Experience with Excel, SQL, and data analysis tools.\n- Communication and data presentation skills.\n- Graduate in statistics, mathematics, or equivalent.",
                            JobLocation = "Văn phòng 5, Số 23, Phố Lê Duẩn, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4134),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Data Analyst",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("02b7b11b-174b-402e-b0ec-124fd0c02ef6"),
                            CreatedAt = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4139),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design user interfaces for applications and websites.\n- Research and analyze user needs to improve experiences.\n- Create design prototypes and collaborate with development teams.\n\nCandidate Requirements:\n- Experience with Figma, Sketch, or Adobe XD.\n- Good communication and teamwork skills.\n- Graduate in design or equivalent.",
                            JobLocation = "Tầng 2, Số 45, Phố Lê Lai, Quận 1, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4139),
                            SalaryRange = "1800 - 2200",
                            Status = 0,
                            Title = "UX/UI Designer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("d8b10a03-4f43-4b48-9eca-182ed9a9ea33"),
                            CreatedAt = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4142),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Manage the recruitment and training processes for new employees.\n- Develop HR policies and manage performance.\n- Advise management on HR-related issues.\n\nCandidate Requirements:\n- At least 3 years of experience in a similar position.\n- Strong communication and leadership skills.\n- Graduate in human resource management or equivalent.",
                            JobLocation = "Văn phòng 3, Số 78, Phố Nguyễn Trãi, Quận Thanh Xuân, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4142),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "HR Manager",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("9c1140f0-2d9f-456d-8615-4816f4ad3fda"),
                            CreatedAt = new DateTime(2024, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4145),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Design graphic products for marketing campaigns.\n- Collaborate with other departments to create creative content.\n- Maintain the company’s brand and design style.\n\nCandidate Requirements:\n- Experience with Adobe Illustrator, Photoshop.\n- Creative thinking and ability to work under pressure.\n- Graduate in graphic design or equivalent.",
                            JobLocation = "Tầng trệt, Số 92, Phố Võ Văn Kiệt, Quận 1, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4145),
                            SalaryRange = "1200 - 1500",
                            Status = 0,
                            Title = "Graphic Designer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("cba45913-709e-452a-a91b-98842dc7240e"),
                            CreatedAt = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4148),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Write content for blogs, websites, and social media.\n- Research and develop new content topics.\n- Optimize content for SEO.\n\nCandidate Requirements:\n- Good writing and editing skills.\n- Experience in content writing is a plus.\n- Graduate in journalism, communication, or equivalent.",
                            JobLocation = "Văn phòng 10, Số 56, Phố Nguyễn Thị Minh Khai, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4147),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Content Writer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("c4352352-54f6-4287-a1d2-c4e5c976011a"),
                            CreatedAt = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4151),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Seek and develop new customers.\n- Conduct calls and meet clients to introduce products.\n- Achieve monthly sales targets.\n\nCandidate Requirements:\n- Experience in sales.\n- Good communication and persuasion skills.\n- University graduate in business or equivalent.",
                            JobLocation = "Văn phòng 4, Số 150, Phố Trần Hưng Đạo, Quận 5, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4151),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Sales Executive",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("26da9acc-6f4d-4d08-9ee5-f36cca08b9d3"),
                            CreatedAt = new DateTime(2024, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4154),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design and implement computer networks.\n- Monitor and maintain network systems.\n- Troubleshoot network-related issues.\n\nCandidate Requirements:\n- Experience with networking equipment.\n- CCNA certification is a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà B, Số 34, Phố Lê Văn Sỹ, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4154),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Network Engineer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("010b6b2b-3a39-43f1-b9c0-edf8e670b08a"),
                            CreatedAt = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4157),
                            IndustryId = 3,
                            JobDescription = "Position Overview:\n- Responsible for product development and management.\n- Coordinate with departments to ensure product timelines.\n- Research market trends and analyze customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in product management.\n- Strong leadership and communication skills.\n- Graduate in business or marketing.",
                            JobLocation = "Tòa nhà D, Số 80, Phố Trần Phú, Quận Hà Đông, Hải Phòng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4157),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Product Manager",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("14425695-aaf0-479f-b554-b69f8fb5a1b8"),
                            CreatedAt = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4160),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Develop both frontend and backend web applications.\n- Collaborate with design and product teams.\n- Optimize code and application performance.\n\nCandidate Requirements:\n- Experience with React, Node.js, and databases.\n- Ability to manage both frontend and backend tasks.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà C, Số 65, Phố Trần Duy Hưng, Quận Cầu Giấy, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4159),
                            SalaryRange = "3000 - 5000",
                            Status = 0,
                            Title = "Full-stack Developer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("45f18753-237d-4881-a106-638e921ac18a"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4163),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4164),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Analyze financial situations and prepare financial reports.\n- Provide investment and risk management recommendations.\n- Monitor and analyze market trends.\n\nCandidate Requirements:\n- Experience in financial analysis.\n- Strong analytical and reporting skills.\n- Graduate in finance or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4163),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Financial Analyst",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("39b35fc4-5615-407a-bbc5-6078728c992c"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4166),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4167),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Build and implement digital marketing campaigns.\n- Manage social media channels and optimize advertisements.\n- Analyze campaign effectiveness and report results.\n\nCandidate Requirements:\n- Experience in digital marketing.\n- Analytical skills and proficiency in online marketing tools.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4166),
                            SalaryRange = "1500 - 2000",
                            Status = 0,
                            Title = "Digital Marketing Specialist",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("ebe71d9f-1bf7-41e2-bd71-9040572350a5"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4169),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4170),
                            IndustryId = 4,
                            JobDescription = "Position Overview:\n- Analyze business requirements and processes.\n- Collaborate with departments to improve operational efficiency.\n- Prepare analytical documents and reports for management.\n\nCandidate Requirements:\n- Experience in business analysis.\n- Good communication and teamwork skills.\n- Graduate in business administration or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4169),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Business Analyst",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("db1fc396-6a06-4bce-9537-6239c8778452"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4172),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4172),
                            IndustryId = 7,
                            JobDescription = "Position Overview:\n- Provide customer support via phone, email, and chat.\n- Resolve customer issues quickly and effectively.\n- Collect customer feedback to improve services.\n\nCandidate Requirements:\n- Good communication and listening skills.\n- Experience in customer service is an advantage.\n- Graduate from vocational school or higher.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4172),
                            SalaryRange = "1000 - 1500",
                            Status = 0,
                            Title = "Customer Support Specialist",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("56856547-45b0-4536-a5e0-d2870fb885ac"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4175),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4175),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Develop and maintain mobile applications on iOS and Android.\n- Participate in product design and development processes.\n- Optimize application performance.\n\nCandidate Requirements:\n- Experience with Swift, Kotlin, or React Native.\n- Creative problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4175),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Mobile App Developer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("0543eb22-957b-47f5-966d-274a13761cd2"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4178),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4178),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Design and implement cloud computing solutions.\n- Manage infrastructure and data security in the cloud.\n- Optimize costs and system performance.\n\nCandidate Requirements:\n- Experience with AWS, Azure, or Google Cloud.\n- Programming skills and understanding of computer networks.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Đà Nẵng",
                            JobTypeId = 2,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4178),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Cloud Engineer",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("601918e9-414f-489c-ac31-654ed6175be7"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4180),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4181),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Analyze and assess security risks.\n- Implement measures to protect information systems.\n- Monitor and respond to security incidents.\n\nCandidate Requirements:\n- Experience in cybersecurity.\n- Certifications such as CISSP or CEH are a plus.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4181),
                            SalaryRange = "3000 - 3500",
                            Status = 0,
                            Title = "Cybersecurity Analyst",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("cd8857df-f2f6-480d-a7ae-c012b79162bd"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4183),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4184),
                            IndustryId = 1,
                            JobDescription = "Position Overview:\n- Manage and maintain the company's databases.\n- Optimize query performance and data security.\n- Support users in accessing and using databases.\n\nCandidate Requirements:\n- Experience with SQL Server, MySQL, or Oracle.\n- Strong analytical and problem-solving skills.\n- Graduate in IT or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hà Nội",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4183),
                            SalaryRange = "2000 - 2500",
                            Status = 0,
                            Title = "Database Administrator",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("ece8b096-4b1a-4aca-8cf6-ae1f50868af5"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4188),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4188),
                            IndustryId = 2,
                            JobDescription = "Position Overview:\n- Plan and implement marketing campaigns.\n- Manage marketing budgets and report results.\n- Analyze market trends and customer needs.\n\nCandidate Requirements:\n- At least 3 years of experience in marketing.\n- Strong leadership and communication skills.\n- Graduate in marketing or equivalent.",
                            JobLocation = "Văn phòng 2, Số 100, Phố Trần Nhân Tông, Quận 3, Hồ Chí Minh",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4188),
                            SalaryRange = "2500 - 3000",
                            Status = 0,
                            Title = "Marketing Manager",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("6c18b2e3-4c34-434e-8f75-585e990c6031"),
                            CreatedAt = new DateTime(2024, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiredAt = new DateTime(2024, 11, 30, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4191),
                            IndustryId = 8,
                            JobDescription = "Position Overview:\n- Plan and oversee content strategies for branding.\n- Coordinate with writers and designers for content creation.\n- Analyze audience insights to improve content.\n\nCandidate Requirements:\n- Strong writing and editorial skills.\n- Experience in content strategy or journalism.\n- Graduate in communication or marketing.",
                            JobLocation = "Văn phòng 7, Số 11, Phố Lê Lợi, Quận 1, Đà Nẵng",
                            JobTypeId = 3,
                            ModifiedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4191),
                            SalaryRange = "1500 - 2200",
                            Status = 0,
                            Title = "Content Strategist",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4060),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4062),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4063),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("926d59d1-0274-4a9c-9472-a95c556d83ea"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4015),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("19f91f0f-0ab6-47a1-86ad-77e56764d263")
                        },
                        new
                        {
                            Id = new Guid("899e6727-42ae-4d5f-a445-18dabd5a05cb"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4021),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16")
                        },
                        new
                        {
                            Id = new Guid("4b078570-0d83-45af-adef-b2b941a5ec56"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4022),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("5d9281b1-caf0-4b1b-8817-80be49486873")
                        },
                        new
                        {
                            Id = new Guid("e700e819-a2ee-410f-ab99-956bfc23af1d"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4023),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("3e3c92cd-78ca-42ec-ad99-4a2563c9fde8")
                        },
                        new
                        {
                            Id = new Guid("c5369fbd-a24a-41d1-bfee-827427fe63ab"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4024),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("fbf649f9-cc95-4ef8-8841-38302fa40f02")
                        },
                        new
                        {
                            Id = new Guid("fad555cf-3522-418f-9fb0-7e2c40ecc083"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4025),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("4cd08585-3193-4319-bb0e-72996bd621a7")
                        },
                        new
                        {
                            Id = new Guid("a1052d11-de5e-4449-af36-8aebfb736058"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4027),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("b0d831d8-339c-46ba-95a5-4887d96c4b35")
                        },
                        new
                        {
                            Id = new Guid("8c96393f-39df-4933-bc91-b8d6189b03bf"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4029),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f6989945-9df8-4796-b23a-b64ea9f2a0f7")
                        },
                        new
                        {
                            Id = new Guid("93fd53a3-6758-4f58-9058-7743305320d4"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4031),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("58de2045-3d9c-4dc1-8838-ee4300521263")
                        },
                        new
                        {
                            Id = new Guid("4f5cb15c-726d-4623-98b2-e1fa7f732b02"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4032),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("cf545087-0166-4cc3-bf36-aefaf1e97f15")
                        },
                        new
                        {
                            Id = new Guid("bd62dc43-976e-4e14-96c7-eb3d7da422bc"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4033),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f1c6d632-2a2f-470a-85f3-1f45e2647b65")
                        },
                        new
                        {
                            Id = new Guid("9eb68633-56a1-4b4d-915a-351b29a2e6b3"),
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(4034),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("f62f3551-0d44-452c-a8ea-ad886619a43f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19f91f0f-0ab6-47a1-86ad-77e56764d263"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 31, 17, 35, 53, 496, DateTimeKind.Utc).AddTicks(3923),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("10331126-4b2c-4a4e-98cb-c851253a0e16"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("5d9281b1-caf0-4b1b-8817-80be49486873"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        },
                        new
                        {
                            Id = new Guid("3e3c92cd-78ca-42ec-ad99-4a2563c9fde8"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnweek@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Week",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zWTkYvKaD2nrl/FIEzZvAus4fK1zT5kIk9U.IrzNxHZOzLxYzIYNe",
                            Phone = "",
                            RoleId = 3,
                            Username = "johnweek"
                        },
                        new
                        {
                            Id = new Guid("fbf649f9-cc95-4ef8-8841-38302fa40f02"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huy@example.com",
                            FirstName = "Tran Duck",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Huy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$MNV7kUVAks5PkB4cMD8cNuLvONZlKt/ej7.hCdRTGyj4F/csD8oKK",
                            Phone = "",
                            RoleId = 3,
                            Username = "tranduckhuy"
                        },
                        new
                        {
                            Id = new Guid("4cd08585-3193-4319-bb0e-72996bd621a7"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sang@example.com",
                            FirstName = "Tran Ngoc",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Sang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$CwxlScy8xNpcrGL/2sg7V.vDUC1zh.QOjZD1qefQgxmq3vn0Q7R9.",
                            Phone = "",
                            RoleId = 3,
                            Username = "sang"
                        },
                        new
                        {
                            Id = new Guid("b0d831d8-339c-46ba-95a5-4887d96c4b35"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quy@example.com",
                            FirstName = "Nguyen Xuan",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Quy",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$O/urkLFsFi/GN9s0asTeZ.3YnvDozIBPXS5vpDbl6Kvz4RsxZYRIS",
                            Phone = "",
                            RoleId = 3,
                            Username = "quy"
                        },
                        new
                        {
                            Id = new Guid("f6989945-9df8-4796-b23a-b64ea9f2a0f7"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hao@example.com",
                            FirstName = "Nguyen Nhat",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hao",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$KcwDWaYdePFeLgKTwoJd7OQl6YCi9ZvCzdPDdt7lROYp2paxwpyGC",
                            Phone = "",
                            RoleId = 3,
                            Username = "hao"
                        },
                        new
                        {
                            Id = new Guid("58de2045-3d9c-4dc1-8838-ee4300521263"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thuan@example.com",
                            FirstName = "Nguyen Dao",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Minh Thuan",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$3hGHatEPOSTNLlvBEUMw.uxZMLNxLz74/Ls47cvbccwwlJlhFELqS",
                            Phone = "",
                            RoleId = 3,
                            Username = "thuan"
                        },
                        new
                        {
                            Id = new Guid("cf545087-0166-4cc3-bf36-aefaf1e97f15"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang@example.com",
                            FirstName = "Ngo Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Hoang",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$aYH6ji8QMczfCJxRGoBUqeTA7Ttk1JnanbTXBiafDDrrOQcy6hK7O",
                            Phone = "",
                            RoleId = 3,
                            Username = "hoang"
                        },
                        new
                        {
                            Id = new Guid("f1c6d632-2a2f-470a-85f3-1f45e2647b65"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thinh@example.com",
                            FirstName = "Gia",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Thinh",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$kzs6W6lPdNmhq9mAxWfov.FJAHD2YDQJgQ/oiDeeMo78LKzDExz2O",
                            Phone = "",
                            RoleId = 3,
                            Username = "thinh"
                        },
                        new
                        {
                            Id = new Guid("f62f3551-0d44-452c-a8ea-ad886619a43f"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nghia@example.com",
                            FirstName = "Trong",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Nghia",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$zD2J2lknJ27rADmUbwJM9eSS0sX16W/FUw/xVx7XauSjOuxauzeZa",
                            Phone = "",
                            RoleId = 3,
                            Username = "nghia"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
