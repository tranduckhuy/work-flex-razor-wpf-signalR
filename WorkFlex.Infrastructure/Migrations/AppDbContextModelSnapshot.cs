// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6661),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6663),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6664),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6665),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6665),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6666),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2035),
                            IndustryName = "Customer Service",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2036),
                            IndustryName = "Marketing",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2036),
                            IndustryName = "Education",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 25, 4, 2, 5, 375, DateTimeKind.Utc).AddTicks(2037),
                            IndustryName = "Logistics",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dedc35f6-fd46-4c8e-bf6d-d4e8260c67f5"),
                            ApplicationDate = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6769),
                            CvFile = "path/to/cv.pdf",
                            Description = "",
                            JobPostId = new Guid("1ad30699-25c1-4499-a793-3c90cfdc3e5b"),
                            Status = 2,
                            UserId = new Guid("5efd04fb-c937-4c6b-a7d6-f6b097f2a97f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ad30699-25c1-4499-a793-3c90cfdc3e5b"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6692),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6693),
                            IndustryId = 1,
                            JobDescription = "Job Description:\n- Develop and maintain web applications.\n- Participate in the design and product development process.\n- Optimize performance and security of web applications.\n\nCandidate Requirements:\n- Experience with HTML, CSS, JavaScript, and PHP.\n- Problem-solving skills and logical thinking.\n- Graduate in IT or equivalent.",
                            JobLocation = "Tòa nhà A, Số 12, Phố Nguyễn Trãi, Quận Thanh Xuân, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6692),
                            SalaryRange = "1000 - 6000",
                            Status = 0,
                            Title = "Software Engineer",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("cb5b3679-20e0-4c2a-9931-5548fd4017cb"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6704),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6705),
                            IndustryId = 2,
                            JobDescription = "Job Description:\n- Analyze data and create reports for management.\n- Use analytical tools to detect data trends.\n- Collaborate with other departments to improve processes based on data.\n\nCandidate Requirements:\n- Experience with Excel, SQL, and data analysis tools.\n- Communication and data presentation skills.\n- Graduate in statistics, mathematics, or equivalent.",
                            JobLocation = "Văn phòng 5, Số 23, Phố Lê Duẩn, Quận Hải Châu, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6705),
                            SalaryRange = "100 - 1000",
                            Status = 0,
                            Title = "AI Engineer",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("35d0b078-0102-41f2-bfe6-0db34e1599d6"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6708),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6709),
                            IndustryId = 3,
                            JobDescription = "We are looking for a nurse to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6709),
                            SalaryRange = "100 - 500",
                            Status = 0,
                            Title = "Nurse",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("da51dfc7-907a-42bd-8e17-5f297c5dfe71"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6712),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6713),
                            IndustryId = 3,
                            JobDescription = "We are looking for a doctor to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 8, Tống Phước Phổ, Ghềnh Ráng, Quy Nhơn",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6712),
                            SalaryRange = "2000 - 5000",
                            Status = 0,
                            Title = "Doctor",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("cbf0db4e-c82a-4170-ba02-5d619f119076"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6717),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6718),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Artist to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hải Phòng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6717),
                            SalaryRange = "500 - 800",
                            Status = 0,
                            Title = "Artist",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("562e9ef7-f703-4a2f-bb40-09d366bcc5e3"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6720),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6721),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Accountant to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Yên Bái",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6721),
                            SalaryRange = "900 - 15000",
                            Status = 0,
                            Title = "Accountant",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("a3f7c576-8b2f-4862-acd6-5629cc924167"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6723),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6724),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Auditor to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Đà Nẵng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6724),
                            SalaryRange = "100 - 500",
                            Status = 0,
                            Title = "Auditor",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("2532d487-03a0-4dd6-9109-149f37680626"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6727),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6727),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Baker to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Bà Rịa - Vũng Tàu",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6727),
                            SalaryRange = "200 - 700",
                            Status = 0,
                            Title = "Baker",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("34a0c836-5979-4076-b932-cf96be97c5ab"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6730),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6731),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Bodyguard to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Lâm Đồng",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6730),
                            SalaryRange = "100 - 500",
                            Status = 0,
                            Title = "Bodyguard",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("12e96a15-1cb3-4802-9b81-844dd744a5fa"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6733),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6734),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Butler to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6733),
                            SalaryRange = "1000 - 5000",
                            Status = 0,
                            Title = "Butler",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("4d5e4bc4-32be-491d-aefe-1dbd48b7271d"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6736),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6737),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Chef to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6737),
                            SalaryRange = "3000 - 8000",
                            Status = 0,
                            Title = "Chef",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("4a74c472-eb46-4403-95bd-cca4a33b6fec"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6739),
                            ExpiredAt = new DateTime(2024, 11, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6740),
                            IndustryId = 3,
                            JobDescription = "We are looking for a Composer to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6740),
                            SalaryRange = "2500 - 6500",
                            Status = 0,
                            Title = "Composer",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6642),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6644),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6645),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69e5802b-b8e1-4869-a3d9-e69e50c07377"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6622),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("ab9a6cb8-4f1f-473d-aa76-4c96bde60075")
                        },
                        new
                        {
                            Id = new Guid("1cc4be13-8057-4c01-a29e-43b2b91ec16b"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6626),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e")
                        },
                        new
                        {
                            Id = new Guid("96dbebf6-9c08-4a45-b864-231acdee42b0"),
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6627),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("5efd04fb-c937-4c6b-a7d6-f6b097f2a97f")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackgroundImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiterRequestPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab9a6cb8-4f1f-473d-aa76-4c96bde60075"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6579),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$Qj8ov7RydnsbdkZfYAToaumQQIYDCeWcPyUTMeIW4sdhBoFujJHfm",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("b0bafbd8-d47a-442d-821a-781c7d65597e"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6584),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$RbvswLANBzRWrHEvwHJajem0x0uEv10NHZ7rFfdRG1Dn4oSulmavm",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("5efd04fb-c937-4c6b-a7d6-f6b097f2a97f"),
                            Avatar = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/avatar%2Fdefault_avatar.png?alt=media&token=8654c964-e226-4777-ac66-b60d4182d287",
                            BackgroundImg = "https://firebasestorage.googleapis.com/v0/b/gdupa-2fa82.appspot.com/o/supplier-background%2Fprofile-cover.jpg?alt=media&token=cf51dca2-8021-40ee-bd58-66000ab49c10",
                            CreatedAt = new DateTime(2024, 10, 24, 13, 0, 51, 474, DateTimeKind.Utc).AddTicks(6602),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            IsRecruiterRequestPending = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$12$L90P0yqjOYUyP8iuS5YkCe669W9DQnIRqqkzGVw24cJwVTVBhmc3i",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
