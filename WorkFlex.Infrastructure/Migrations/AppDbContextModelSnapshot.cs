// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkFlex.Infrastructure.Data;

#nullable disable

namespace WorkFlex.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserOne")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserTwo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserOne");

                    b.HasIndex("UserTwo");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Industry");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5262),
                            IndustryName = "Software Development",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5265),
                            IndustryName = "Artificial Intelligence",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5266),
                            IndustryName = "Healthcare",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5266),
                            IndustryName = "Finance",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5267),
                            IndustryName = "Transportation",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5268),
                            IndustryName = "Agriculture",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CvFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76f17ef8-39cb-49d1-a7e1-b7a455749b72"),
                            ApplicationDate = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5325),
                            CvFile = "path/to/cv.pdf",
                            JobPostId = new Guid("6528f2cc-3100-41cc-98b9-8ae95842b670"),
                            Status = 2,
                            UserId = new Guid("c74d1f3b-9af9-4e6f-b30f-deef918377b6")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6528f2cc-3100-41cc-98b9-8ae95842b670"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5290),
                            ExpiredAt = new DateTime(2024, 11, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5290),
                            IndustryId = 1,
                            JobDescription = "Looking for a skilled software engineer. Must have experience with C# and .NET Core. Angular experience is a plus.",
                            JobLocation = "Số 13, Tân Thuận Đông, Quận 7, Hồ Chí Minh",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5290),
                            SalaryRange = "",
                            Status = 0,
                            Title = "Software Engineer",
                            UserId = new Guid("fae7a60c-115e-4e3e-b3c2-3aadc3145221")
                        },
                        new
                        {
                            Id = new Guid("8552b8f7-5539-4d6c-8a94-aef6ede0d2b8"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5302),
                            ExpiredAt = new DateTime(2024, 11, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5302),
                            IndustryId = 2,
                            JobDescription = "Looking for a data scientist to join our AI team. Must have experience with Python, TensorFlow, and Keras.",
                            JobLocation = " 239 Đ. Xuân Thủy, Dịch Vọng Hậu, Cầu Giấy, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5302),
                            SalaryRange = "",
                            Status = 0,
                            Title = "AI Engineer",
                            UserId = new Guid("fae7a60c-115e-4e3e-b3c2-3aadc3145221")
                        },
                        new
                        {
                            Id = new Guid("317cb144-c805-4286-ae14-61030d19d290"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5305),
                            ExpiredAt = new DateTime(2024, 11, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5305),
                            IndustryId = 3,
                            JobDescription = "We are looking for a nurse to join our team. Must have a nursing degree and at least 2 years of experience.",
                            JobLocation = "Số 1, Đại Cồ Việt, Hai Bà Trưng, Hà Nội",
                            JobTypeId = 1,
                            ModifiedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5305),
                            SalaryRange = "",
                            Status = 0,
                            Title = "Nurse",
                            UserId = new Guid("fae7a60c-115e-4e3e-b3c2-3aadc3145221")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5244),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5246),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5247),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Internship"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bee5fa1a-18f4-49d0-af21-5e5cf5256cd0"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5222),
                            Headline = "Admin Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("00b37dbc-8205-4a4a-ba57-745ed29c008f")
                        },
                        new
                        {
                            Id = new Guid("becf2b39-e9f1-4ba9-94f9-47345a02341c"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5225),
                            Headline = "Recruiter Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("fae7a60c-115e-4e3e-b3c2-3aadc3145221")
                        },
                        new
                        {
                            Id = new Guid("add311ba-fe31-40a3-918d-b1f58e2b8f4a"),
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5226),
                            Headline = "Job Seeker Profile",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "",
                            UserId = new Guid("c74d1f3b-9af9-4e6f-b30f-deef918377b6")
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Recruiter"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "JobSeeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00b37dbc-8205-4a4a-ba57-745ed29c008f"),
                            Avatar = "",
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5185),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsLock = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "admin@@",
                            Phone = "",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("fae7a60c-115e-4e3e-b3c2-3aadc3145221"),
                            Avatar = "",
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5202),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "recruiter@example.com",
                            FirstName = "Recruiter",
                            IsActive = true,
                            IsLock = false,
                            LastName = "User",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "recruiter@",
                            Phone = "",
                            RoleId = 2,
                            Username = "recruiter"
                        },
                        new
                        {
                            Id = new Guid("c74d1f3b-9af9-4e6f-b30f-deef918377b6"),
                            Avatar = "",
                            CreatedAt = new DateTime(2024, 10, 5, 14, 29, 15, 47, DateTimeKind.Utc).AddTicks(5205),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jobseeker@example.com",
                            FirstName = "Job",
                            IsActive = true,
                            IsLock = false,
                            LastName = "Seeker",
                            Location = "",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "jobseeker@@",
                            Phone = "",
                            RoleId = 3,
                            Username = "jobseeker"
                        });
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "UserOneNavigation")
                        .WithMany("ConversationsAsUserOne")
                        .HasForeignKey("UserOne")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "UserTwoNavigation")
                        .WithMany("ConversationsAsUserTwo")
                        .HasForeignKey("UserTwo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOneNavigation");

                    b.Navigation("UserTwoNavigation");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.ConversationReply", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Industry", "Industry")
                        .WithMany("JobPosts")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Profile", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WorkFlex.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.HasOne("WorkFlex.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationReplies");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Industry", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkFlex.Domain.Entities.User", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("ConversationsAsUserOne");

                    b.Navigation("ConversationsAsUserTwo");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
