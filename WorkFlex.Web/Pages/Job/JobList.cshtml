@page
@model WorkFlex.Web.Pages.Job.JobListModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Job List";
}

<!-- Hero Area Start-->
<div class="slider-area ">
    <div class="single-slider section-overly slider-height2 d-flex align-items-center" data-background="/img/hero/about.jpg">
        <div class="container">
            <div class="row">
                <div class="col-xl-12">
                    <div class="hero-cap text-center">
                        <h2>Get your job</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Hero Area End -->
<!-- Job list area start -->
<div class="job-listing-area pt-120 pb-120">
    <div class="container">
        <form id="filterForm" method="get">
            <div class="row">
                <!-- Left content -->
                <div class="col-xl-3 col-lg-3 col-md-4">
                    <div class="row">
                        <div class="col-12">
                            <div class="small-section-tittle2 mb-45">
                                <div class="ion">
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         width="20px" height="12px">
                                        <path fill-rule="evenodd" fill="rgb(27, 207, 107)"
                                              d="M7.778,12.000 L12.222,12.000 L12.222,10.000 L7.778,10.000 L7.778,12.000 ZM-0.000,-0.000 L-0.000,2.000 L20.000,2.000 L20.000,-0.000 L-0.000,-0.000 ZM3.333,7.000 L16.667,7.000 L16.667,5.000 L3.333,5.000 L3.333,7.000 Z" />
                                    </svg>
                                </div>
                                <h4>Filter Jobs</h4>
                            </div>
                        </div>
                    </div>
                    <!-- Job filter start -->
                    <div class="job-category-listing mb-50">
                        <!-- single one -->
                        <div class="single-listing">
                            <div class="small-section-tittle2">
                                <h4>Job Location</h4>
                            </div>
                            <!-- Select job location start -->
                            <div class="select-job-items2">
                                <select name="Filters.JobLocation" asp-for="Filters.JobLocation" onchange="submitFilters()" id="jobLocationSelect"></select>
                            </div>
                            <!--  Select job location end-->
                            <!-- Select types start -->
                            <div class="select-Categories pt-80 pb-50">
                                <div class="small-section-tittle2">
                                    <h4>Job Type</h4>
                                </div>
                                <label class="container" for="Filters.JobType.All">
                                    All
                                    <input type="checkbox" name="Filters.JobType" id="Filters.JobType.All" value="All" onchange="submitFilters()" checked />
                                    <span class="checkmark"></span>
                                </label>
                                <input type="text" name="hiddenFilters.JobType" value="All" hidden />
                                @foreach (var jobType in Model.JobTypes)
                                {
                                    <label class="container" for="Filters.JobType.@jobType.TypeName">
                                        @jobType.TypeName
                                        <input type="checkbox" name="Filters.JobType" onchange="submitFilters()" id="Filters.JobType.@jobType.TypeName" />
                                        <span class="checkmark"></span>
                                    </label>
                                    <input type="text" asp-for="Filters.JobType" name="hiddenFilters.JobType" value="@jobType.TypeName" hidden />
                                }
                            </div>
                            <!-- Select types End -->
                        </div>
                        <!-- single two -->
                        <div class="single-listing">
                            <!-- Select posted date start -->
                            <div class="select-Categories pb-50">
                                <div class="small-section-tittle2">
                                    <h4>Posted Within</h4>
                                </div>
                                @foreach (var option in new List<string> { "Any", "Today", "Last 2 days", "Last 3 days", "Last 5 days", "Last 10 days" })
                                {
                                    <label class="container" for="@option">
                                        @option
                                        <input type="checkbox" name="Filters.PostedWithin" onchange="submitFilters()" id="@option" />
                                        <span class="checkmark"></span>
                                    </label>
                                    <input type="text" asp-for="Filters.PostedWithin" name="hiddenFilters.PostedWithin" value="@option" hidden />
                                }
                            </div>
                            <!-- Select posted date end -->
                        </div>
                        <div class="single-listing">
                            <!-- Range salary start -->
                            <aside class="left_widgets p_filter_widgets price_rangs_aside sidebar_box_shadow">
                                <div class="small-section-tittle2">
                                    <h4>Salary Range</h4>
                                </div>
                                <div class="widgets_inner">
                                    <div class="range_item">
                                        <!-- <div id="slider-range"></div> -->
                                        <input type="text" class="js-range-slider" value="" />
                                        <div class="d-flex align-items-center">
                                            <div class="price_text">
                                                <p>Salary :</p>
                                            </div>
                                            <div class="price_value d-flex justify-content-center">
                                                <input type="text" asp-for="Filters.MinSalary" name="Filters.MinSalary" class="js-input-from" id="amount" onchange="setFilterTimeout()" readonly />
                                                <span>to</span>
                                                <input type="text" asp-for="Filters.MaxSalary" name="Filters.MaxSalary" class="js-input-to" id="amount" onchange="setFilterTimeout()" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </aside>
                            <!-- Range salary end -->
                        </div>
                    </div>
                    <!-- Job filter end -->
                </div>
                <!-- Right content -->
                <div class="col-xl-9 col-lg-9 col-md-8">
                    <!-- Featured_job_start -->
                    <section class="featured-job-area">
                        <div class="container">
                            <!-- Count of Job list Start -->
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="count-job mb-35">
                                        <span>@Model.TotalCount Jobs found</span>
                                        <!-- Select job items start -->
                                        <div class="select-job-items">
                                            <span>Sort by</span>
                                            <select name="Filters.SortBy" asp-for="Filters.SortBy" onchange="submitFilters()">
                                                <option value="">None</option>
                                                <option value="SalaryLowToHigh">Salary: Low to High</option>
                                                <option value="SalaryHighToLow">Salary: High to Low</option>
                                            </select>
                                        </div>
                                        <!-- Hidden Fields -->
                                        <input type="hidden" name="pageNumber" value="@Model.CurrentPage" />
                                        <!--  Select job items End-->
                                    </div>
                                </div>
                            </div>
                            <!-- Count of Job list End -->
                            <!-- single-job-content -->
                            <div id="jobList">
                                @foreach (var job in Model.Jobs)
                                {
                                    <div class="single-job-items mb-30">
                                        <div class="job-items">
                                            <div class="company-img">
                                                <a href="#"><img src="@job.User.Avatar" alt="Recruiter's Avatar'"></a>
                                            </div>
                                            <div class="job-tittle job-tittle2">
                                                <a href="#">
                                                    <h4>@job.Title</h4>
                                                </a>
                                                <ul>
                                                    <li>@job.Industry.IndustryName</li>
                                                    <li><i class="fas fa-map-marker-alt"></i>@job.JobLocation</li>
                                                    <li>@job.SalaryRange</li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="items-link items-link2 f-right">
                                            <a href="job_details.html">@job.JobType.TypeName</a>
                                            <span>@job.DisplayCreatedAt</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </section>
                    <!-- Featured_job_end -->
                </div>
            </div>
        </form>
    </div>
</div>
<!-- Job list area end -->
<!--Pagination Start  -->
<div class="pagination-area pb-115 text-center">
    <div class="container">
        <div class="row">
            <div class="col-xl-12">
                <div class="single-wrap d-flex justify-content-center">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-start">
                            @if (Model.CurrentPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="goToPage(@(Model.CurrentPage - 1))"><span class="ti-angle-left"></span></a>
                                </li>
                            }
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0)" onclick="goToPage(@i)">@i.ToString("D1")</a>
                                </li>
                            }
                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="goToPage(@(Model.CurrentPage + 1))"><span class="ti-angle-right"></span></a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Pagination End  -->
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script>
        // Create Object JobListVM
        const tempObj = {
            JobLocation: '',
            JobType: [],
            PostedWithin: [],
            MinSalary: null,
            MaxSalary: null,
            SortBy: '',
            PageNumber: 1,
            PageSize: 7
        };
        function submitFilters() {
            var form = $('#filterForm');
            form.find('input, select').prop('disabled', true); // Disable form elements during submission

            // Loop through each input and select in the form
            form.find('input, select').each(function () {
                var name = $(this).attr('name'); // Get the name of the input or select
                var value;

                // Check if it is a checkbox
                if ($(this).is(':checkbox')) {
                    if ($(this).is(':checked')) {
                        // If checked, get the value from the hidden input next to it
                        value = $(this).closest('label').find('input[type="text"]').val();
                    } else {
                        value = null; // If not checked, set value to null
                    }
                } else {
                    value = $(this).val();
                }

                // Assign value to jobListVM based on the name
                switch (name) {
                    case 'Filters.JobLocation':
                        tempObj.JobLocation = value; // Set JobLocation
                        break;
                    case 'Filters.JobType':
                        // Only add to JobType if the checkbox is checked
                        tempObj.JobType.push(value);
                        break;
                    case 'Filters.PostedWithin':
                        // Only add to PostedWithin if the checkbox is checked
                        tempObj.PostedWithin.push(value);
                        break;
                    case 'Filters.MinSalary':
                        tempObj.MinSalary = value ? parseFloat(value) : null; // Convert to decimal
                        break;
                    case 'Filters.MaxSalary':
                        tempObj.MaxSalary = value ? parseFloat(value) : null; // Convert to decimal
                        break;
                    case 'Filters.SortBy':
                        tempObj.SortBy = value; // Set SortBy
                        break;
                    case 'pageNumber':
                        tempObj.PageNumber = parseInt(value) || 1; // Convert to integer
                        break;
                    default:
                        // Handle other cases if needed
                        break;
                }
            });

            // Create a new object for sending data
            const jobListVm = {
                JobLocation: tempObj.JobLocation,
                JobType: tempObj.JobType.join(', '), // Convert JobType to a string only when sending
                PostedWithin: tempObj.PostedWithin.join(', '), // Convert PostedWithin to a string only when sending
                MinSalary: tempObj.MinSalary,
                MaxSalary: tempObj.MaxSalary,
                SortBy: tempObj.SortBy,
                PageNumber: tempObj.PageNumber,
                PageSize: tempObj.PageSize
            };

            // AJAX call to submit the filters
            $.ajax({
                url: form.attr('action'),
                data: jobListVm, // Send the constructed data
                type: 'GET',
                success: function (result) {
                    console.log("Fetch data job success!"); // Log success message
                    // Update the job list section with the new data
                    var newContent = $(result).find('#jobList').html();
                    $('#jobList').html(newContent);

                    // Update pagination
                    var newPagination = $(result).find('.pagination-area').html();
                    $('.pagination-area').html(newPagination);

                    form.find('input, select').prop('disabled', false); // Re-enable form elements
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error); // Log error message
                    form.find('input, select').prop('disabled', false); // Re-enable form elements in case of error
                }
            });
        }

        let filterTimeout;
        function setFilterTimeout() {
            // Clear the previous timeout if it exists
            clearTimeout(filterTimeout);

            // Set a new timeout for 2 seconds (2000 milliseconds)
            filterTimeout = setTimeout(function () {
                submitFilters(); 
            }, 2000); 
        }

        function goToPage(pageNumber) {
            $('input[name="pageNumber"]').val(pageNumber);
            submitFilters();
        }

        // Call API provinces
        function renderData(array, selectId) {
            let options = '<option value="Anywhere" selected>Anywhere</option>';
            array.forEach(element => {
                options += '<option value="' + element.name + '">' + element.name + '</option>';
            });
            const selectElement = document.querySelector("#" + selectId);
            selectElement.innerHTML = options;
            $(selectElement).niceSelect('update');
        }

        function callAPI(api) {
            return axios.get(api)
                .then((response) => {
                    renderData(response.data, 'jobLocationSelect');
                })
                .catch(error => {
                    console.error("Error occured when call API:", error);
                });
        }

        $(document).ready(function () {
            // Call API for province's name
            const host = "https://provinces.open-api.vn/api/";
            callAPI(host + '?depth=1');

            // Attach change events to filter inputs
            $('#filterForm').on('change', 'input, select', function () {
                submitFilters();
            });
        });
    </script>
}
